
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00003f68  00003ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  00800146  00800146  000040e2  2**0
                  ALLOC
  3 .stab         00003f60  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018cd  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009911  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000bc45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000cd46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000dcc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000de48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 1b 	call	0x3774	; 0x3774 <main>
      8a:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e1       	ldi	r22, 0x1E	; 30
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static u8   ADC_u8ChainConversionIndex = 0;

static u8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* select Vref = Avcc */
	CLR_BIT(ADC_u8_ADMUX_REG,ADMUX_REFS1);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,ADMUX_REFS0);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
	/* Left adjustment */
	CLR_BIT(ADC_u8_ADMUX_REG,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	/* Single conversion */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	/* set prescalar to CLK/64 */
	SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADPS2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADPS0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
	/* ADC Enable */
	SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSync>:


u8 ADC_u8GetDigitalValueSync(u8 Copy_u8ChannelNum,u16 *Copy_pu16ReturnedDigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 local_u8ErrorState=STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05

u32 local_u32TimerOutCounter=0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04

if(ADC_u8BusyState==IDLE)
     d42:	80 91 4a 01 	lds	r24, 0x014A
     d46:	88 23       	and	r24, r24
     d48:	09 f0       	breq	.+2      	; 0xd4c <ADC_u8GetDigitalValueSync+0x30>
     d4a:	67 c0       	rjmp	.+206    	; 0xe1a <ADC_u8GetDigitalValueSync+0xfe>
{
   if((Copy_u8ChannelNum<=31)&&(Copy_pu16ReturnedDigitalValue!= NULL))
     d4c:	8e 81       	ldd	r24, Y+6	; 0x06
     d4e:	80 32       	cpi	r24, 0x20	; 32
     d50:	08 f0       	brcs	.+2      	; 0xd54 <ADC_u8GetDigitalValueSync+0x38>
     d52:	61 c0       	rjmp	.+194    	; 0xe16 <ADC_u8GetDigitalValueSync+0xfa>
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	98 85       	ldd	r25, Y+8	; 0x08
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	09 f4       	brne	.+2      	; 0xd5e <ADC_u8GetDigitalValueSync+0x42>
     d5c:	5c c0       	rjmp	.+184    	; 0xe16 <ADC_u8GetDigitalValueSync+0xfa>
  {   ADC_u8BusyState = BUSY;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 4a 01 	sts	0x014A, r24
	/* Clear channel region */
	ADC_u8_ADMUX_REG &= 0b11100000;
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 7e       	andi	r24, 0xE0	; 224
     d70:	8c 93       	st	X, r24
	/* Select channel */
	ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;
     d72:	a7 e2       	ldi	r26, 0x27	; 39
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	90 81       	ld	r25, Z
     d7c:	8e 81       	ldd	r24, Y+6	; 0x06
     d7e:	89 2b       	or	r24, r25
     d80:	8c 93       	st	X, r24
	/* start conversion */
    SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADSC);
     d82:	a6 e2       	ldi	r26, 0x26	; 38
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e2       	ldi	r30, 0x26	; 38
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	8c 93       	st	X, r24
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <ADC_u8GetDigitalValueSync+0x8c>
    /* wait for the flag ( POLLING ) */
    while(!GET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIF)&&(local_u32TimerOutCounter!=ADC_u32TimeOut))
    {
    	local_u32TimerOutCounter++;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	ab 81       	ldd	r26, Y+3	; 0x03
     d98:	bc 81       	ldd	r27, Y+4	; 0x04
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	ab 83       	std	Y+3, r26	; 0x03
     da6:	bc 83       	std	Y+4, r27	; 0x04
	/* Select channel */
	ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;
	/* start conversion */
    SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADSC);
    /* wait for the flag ( POLLING ) */
    while(!GET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIF)&&(local_u32TimerOutCounter!=ADC_u32TimeOut))
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 95       	swap	r24
     db0:	8f 70       	andi	r24, 0x0F	; 15
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	90 70       	andi	r25, 0x00	; 0
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f4       	brne	.+24     	; 0xdd6 <ADC_u8GetDigitalValueSync+0xba>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	ab 81       	ldd	r26, Y+3	; 0x03
     dc4:	bc 81       	ldd	r27, Y+4	; 0x04
     dc6:	80 33       	cpi	r24, 0x30	; 48
     dc8:	25 e7       	ldi	r18, 0x75	; 117
     dca:	92 07       	cpc	r25, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	a2 07       	cpc	r26, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	b2 07       	cpc	r27, r18
     dd4:	f1 f6       	brne	.-68     	; 0xd92 <ADC_u8GetDigitalValueSync+0x76>
    {
    	local_u32TimerOutCounter++;
    }
    if (local_u32TimerOutCounter==ADC_u32TimeOut)
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	ab 81       	ldd	r26, Y+3	; 0x03
     ddc:	bc 81       	ldd	r27, Y+4	; 0x04
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	25 e7       	ldi	r18, 0x75	; 117
     de2:	92 07       	cpc	r25, r18
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	a2 07       	cpc	r26, r18
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	b2 07       	cpc	r27, r18
     dec:	11 f4       	brne	.+4      	; 0xdf2 <ADC_u8GetDigitalValueSync+0xd6>
    {
    	/* loop is broken due to reaching time out */
    	local_u8ErrorState = STD_TYPES_NOK;
     dee:	1d 82       	std	Y+5, r1	; 0x05
     df0:	15 c0       	rjmp	.+42     	; 0xe1c <ADC_u8GetDigitalValueSync+0x100>
    else
    {

    	/* Loop is broken because flag is raised */
    	/*Clear flag  */
    	SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIF);
     df2:	a6 e2       	ldi	r26, 0x26	; 38
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e6 e2       	ldi	r30, 0x26	; 38
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 61       	ori	r24, 0x10	; 16
     dfe:	8c 93       	st	X, r24
    	/* read the digital value */
    	*Copy_pu16ReturnedDigitalValue = ADC_u16_ADC_REG;
     e00:	e4 e2       	ldi	r30, 0x24	; 36
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	ef 81       	ldd	r30, Y+7	; 0x07
     e0a:	f8 85       	ldd	r31, Y+8	; 0x08
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
    	ADC_u8BusyState = IDLE;
     e10:	10 92 4a 01 	sts	0x014A, r1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <ADC_u8GetDigitalValueSync+0x100>
    }
  }

    else
    {
    	local_u8ErrorState=STD_TYPES_NOK;
     e16:	1d 82       	std	Y+5, r1	; 0x05
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <ADC_u8GetDigitalValueSync+0x100>
}

else

{
	local_u8ErrorState=STD_TYPES_NOK;
     e1a:	1d 82       	std	Y+5, r1	; 0x05
}

return local_u8ErrorState;
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e1e:	28 96       	adiw	r28, 0x08	; 8
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <ADC_u8StartConversionAsync>:

u8 ADC_u8StartConversionAsync(u8 Copy_u8ChannelNum,u16 *Copy_pu16Reading,void (*Copy_pvNotificationFunction)(void))
{ u8 Local_u8ErrorState =STD_TYPES_OK;
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_u8StartConversionAsync+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <ADC_u8StartConversionAsync+0x8>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <ADC_u8StartConversionAsync+0xa>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	7c 83       	std	Y+4, r23	; 0x04
     e42:	6b 83       	std	Y+3, r22	; 0x03
     e44:	5e 83       	std	Y+6, r21	; 0x06
     e46:	4d 83       	std	Y+5, r20	; 0x05
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01
if(ADC_u8BusyState==IDLE)
     e4c:	80 91 4a 01 	lds	r24, 0x014A
     e50:	88 23       	and	r24, r24
     e52:	c9 f5       	brne	.+114    	; 0xec6 <ADC_u8StartConversionAsync+0x96>
{

	if((Copy_pu16Reading==NULL)||(Copy_pvNotificationFunction==NULL))
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	21 f0       	breq	.+8      	; 0xe64 <ADC_u8StartConversionAsync+0x34>
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	11 f4       	brne	.+4      	; 0xe68 <ADC_u8StartConversionAsync+0x38>
	{
		Local_u8ErrorState=STD_TYPES_NOK;
     e64:	19 82       	std	Y+1, r1	; 0x01
     e66:	30 c0       	rjmp	.+96     	; 0xec8 <ADC_u8StartConversionAsync+0x98>
	}
	else
	{
    	ADC_u8BusyState = BUSY;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 4a 01 	sts	0x014A, r24
    	/* Make ISR source single channel asynch */
    	ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
     e6e:	10 92 51 01 	sts	0x0151, r1
		/* Initialize the reading variable globally */
		ADC_pu16Reading = Copy_pu16Reading;
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	90 93 47 01 	sts	0x0147, r25
     e7a:	80 93 46 01 	sts	0x0146, r24
		/* Initialize the callback notification function globally */
	    ADC_pvCallBackNotificationFunction = Copy_pvNotificationFunction;
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	90 93 49 01 	sts	0x0149, r25
     e86:	80 93 48 01 	sts	0x0148, r24
		/* Clear channel region */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e8a:	a7 e2       	ldi	r26, 0x27	; 39
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e2       	ldi	r30, 0x27	; 39
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 7e       	andi	r24, 0xE0	; 224
     e96:	8c 93       	st	X, r24
		/* Select channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;
     e98:	a7 e2       	ldi	r26, 0x27	; 39
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e2       	ldi	r30, 0x27	; 39
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	90 81       	ld	r25, Z
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	89 2b       	or	r24, r25
     ea6:	8c 93       	st	X, r24
		/* start conversion */
	    SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADSC);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
	    /* Enable ADC interrupt */
	    SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIE);
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 60       	ori	r24, 0x08	; 8
     ec2:	8c 93       	st	X, r24
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <ADC_u8StartConversionAsync+0x98>
	}

}
else
{
   Local_u8ErrorState = STD_TYPES_NOK;
     ec6:	19 82       	std	Y+1, r1	; 0x01
}

	return Local_u8ErrorState;
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eca:	26 96       	adiw	r28, 0x06	; 6
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <ADC_u8StartChainAsync>:

u8 ADC_u8StartChainAsync(Chain_t* Copy_Chain)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <ADC_u8StartChainAsync+0x6>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	9b 83       	std	Y+3, r25	; 0x03
     eea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	89 83       	std	Y+1, r24	; 0x01
	/* Check null pointer */
	if(Copy_Chain == NULL)
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	9b 81       	ldd	r25, Y+3	; 0x03
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	11 f4       	brne	.+4      	; 0xefc <ADC_u8StartChainAsync+0x20>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	54 c0       	rjmp	.+168    	; 0xfa4 <ADC_u8StartChainAsync+0xc8>
	}
	else
		{
			if(ADC_u8BusyState == IDLE)
     efc:	80 91 4a 01 	lds	r24, 0x014A
     f00:	88 23       	and	r24, r24
     f02:	09 f0       	breq	.+2      	; 0xf06 <ADC_u8StartChainAsync+0x2a>
     f04:	4e c0       	rjmp	.+156    	; 0xfa2 <ADC_u8StartChainAsync+0xc6>
			{
				/* Make ADC busy*/
				ADC_u8BusyState = BUSY;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 4a 01 	sts	0x014A, r24
		    	/* Make ISR source channel asynch */
		    	ADC_u8ISRSource = CHAIN_ASYNCH;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 51 01 	sts	0x0151, r24
				/* Initialize chain channel array */
				ADC_pu8ChainChannelArr = Copy_Chain->Channel;
     f12:	ea 81       	ldd	r30, Y+2	; 0x02
     f14:	fb 81       	ldd	r31, Y+3	; 0x03
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	90 93 4c 01 	sts	0x014C, r25
     f1e:	80 93 4b 01 	sts	0x014B, r24
				/* Init Result array */
				ADC_pu16ChainResultArr = Copy_Chain->Result;
     f22:	ea 81       	ldd	r30, Y+2	; 0x02
     f24:	fb 81       	ldd	r31, Y+3	; 0x03
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	93 81       	ldd	r25, Z+3	; 0x03
     f2a:	90 93 4e 01 	sts	0x014E, r25
     f2e:	80 93 4d 01 	sts	0x014D, r24
				/* Init chain size */
				ADC_u8ChainSize = Copy_Chain->Chain_Size;
     f32:	ea 81       	ldd	r30, Y+2	; 0x02
     f34:	fb 81       	ldd	r31, Y+3	; 0x03
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	80 93 50 01 	sts	0x0150, r24
				/* Init Notification func */
				ADC_pvCallBackNotificationFunction = Copy_Chain->NotificationFunc;
     f3c:	ea 81       	ldd	r30, Y+2	; 0x02
     f3e:	fb 81       	ldd	r31, Y+3	; 0x03
     f40:	85 81       	ldd	r24, Z+5	; 0x05
     f42:	96 81       	ldd	r25, Z+6	; 0x06
     f44:	90 93 49 01 	sts	0x0149, r25
     f48:	80 93 48 01 	sts	0x0148, r24
				/* Init Chain index to zero */
				ADC_u8ChainConversionIndex = 0;
     f4c:	10 92 4f 01 	sts	0x014F, r1

				/* Set required channel */
				ADC_u8_ADMUX_REG &= 0b11100000;
     f50:	a7 e2       	ldi	r26, 0x27	; 39
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 7e       	andi	r24, 0xE0	; 224
     f5c:	8c 93       	st	X, r24
				ADC_u8_ADMUX_REG |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     f5e:	a7 e2       	ldi	r26, 0x27	; 39
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e2       	ldi	r30, 0x27	; 39
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	40 81       	ld	r20, Z
     f68:	20 91 4b 01 	lds	r18, 0x014B
     f6c:	30 91 4c 01 	lds	r19, 0x014C
     f70:	80 91 4f 01 	lds	r24, 0x014F
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	f9 01       	movw	r30, r18
     f7a:	e8 0f       	add	r30, r24
     f7c:	f9 1f       	adc	r31, r25
     f7e:	80 81       	ld	r24, Z
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
				/* Start conversion */
				SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADSC);
     f84:	a6 e2       	ldi	r26, 0x26	; 38
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e6 e2       	ldi	r30, 0x26	; 38
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	8c 93       	st	X, r24
				/* Enable interrupt */
				SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIE);
     f92:	a6 e2       	ldi	r26, 0x26	; 38
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e6 e2       	ldi	r30, 0x26	; 38
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	8c 93       	st	X, r24
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <ADC_u8StartChainAsync+0xc8>
			}
			else
			{
				Local_u8ErrorState = STD_TYPES_NOK;
     fa2:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	return Local_u8ErrorState;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <__vector_16>:

void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
     fdc:	80 91 51 01 	lds	r24, 0x0151
     fe0:	88 23       	and	r24, r24
     fe2:	c9 f4       	brne	.+50     	; 0x1016 <__vector_16+0x64>
	{
	/* read ADC result */
	*ADC_pu16Reading = ADC_u16_ADC_REG;
     fe4:	a0 91 46 01 	lds	r26, 0x0146
     fe8:	b0 91 47 01 	lds	r27, 0x0147
     fec:	e4 e2       	ldi	r30, 0x24	; 36
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	8d 93       	st	X+, r24
     ff6:	9c 93       	st	X, r25
	/* Make ADC state be IDLE */
	ADC_u8BusyState = IDLE;
     ff8:	10 92 4a 01 	sts	0x014A, r1
	/* Invoke callback notification function */
	ADC_pvCallBackNotificationFunction();
     ffc:	e0 91 48 01 	lds	r30, 0x0148
    1000:	f0 91 49 01 	lds	r31, 0x0149
    1004:	09 95       	icall
	/* Disable ADC conversion complete interrupt */
	CLR_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIE);
    1006:	a6 e2       	ldi	r26, 0x26	; 38
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e6 e2       	ldi	r30, 0x26	; 38
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	87 7f       	andi	r24, 0xF7	; 247
    1012:	8c 93       	st	X, r24
    1014:	54 c0       	rjmp	.+168    	; 0x10be <__vector_16+0x10c>
	}
	else if (ADC_u8ISRSource == CHAIN_ASYNCH)   // ISR Source is chain source
    1016:	80 91 51 01 	lds	r24, 0x0151
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	09 f0       	breq	.+2      	; 0x1020 <__vector_16+0x6e>
    101e:	4f c0       	rjmp	.+158    	; 0x10be <__vector_16+0x10c>
	{
		/* read current conversion */
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADC_u16_ADC_REG;
    1020:	20 91 4d 01 	lds	r18, 0x014D
    1024:	30 91 4e 01 	lds	r19, 0x014E
    1028:	80 91 4f 01 	lds	r24, 0x014F
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	d9 01       	movw	r26, r18
    1036:	a8 0f       	add	r26, r24
    1038:	b9 1f       	adc	r27, r25
    103a:	e4 e2       	ldi	r30, 0x24	; 36
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	11 96       	adiw	r26, 0x01	; 1
    1044:	9c 93       	st	X, r25
    1046:	8e 93       	st	-X, r24
		/* Increment Index */
		ADC_u8ChainConversionIndex++;
    1048:	80 91 4f 01 	lds	r24, 0x014F
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	80 93 4f 01 	sts	0x014F, r24
		/* Check chain is finished or not */
		if (ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    1052:	90 91 4f 01 	lds	r25, 0x014F
    1056:	80 91 50 01 	lds	r24, 0x0150
    105a:	98 17       	cp	r25, r24
    105c:	79 f4       	brne	.+30     	; 0x107c <__vector_16+0xca>
		{
			/* Chain is finished */
			/* Make ADC state be IDLE */
			ADC_u8BusyState = IDLE;
    105e:	10 92 4a 01 	sts	0x014A, r1
			/* Invoke callback notification func */
			ADC_pvCallBackNotificationFunction();
    1062:	e0 91 48 01 	lds	r30, 0x0148
    1066:	f0 91 49 01 	lds	r31, 0x0149
    106a:	09 95       	icall
			/* Disable Interrupt */
			CLR_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADIE);
    106c:	a6 e2       	ldi	r26, 0x26	; 38
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e6 e2       	ldi	r30, 0x26	; 38
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	87 7f       	andi	r24, 0xF7	; 247
    1078:	8c 93       	st	X, r24
    107a:	21 c0       	rjmp	.+66     	; 0x10be <__vector_16+0x10c>
		else
		{
			/* Chain is not finished */
			/* Set new required channel */
			/* Set required channel */
			ADC_u8_ADMUX_REG &= 0b11100000;
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 7e       	andi	r24, 0xE0	; 224
    1088:	8c 93       	st	X, r24
			ADC_u8_ADMUX_REG |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	40 81       	ld	r20, Z
    1094:	20 91 4b 01 	lds	r18, 0x014B
    1098:	30 91 4c 01 	lds	r19, 0x014C
    109c:	80 91 4f 01 	lds	r24, 0x014F
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	f9 01       	movw	r30, r18
    10a6:	e8 0f       	add	r30, r24
    10a8:	f9 1f       	adc	r31, r25
    10aa:	80 81       	ld	r24, Z
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
			/* Start conversion */
			SET_BIT(ADC_u8_ADCSRA_REG,ADCSRA_ADSC);
    10b0:	a6 e2       	ldi	r26, 0x26	; 38
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e6 e2       	ldi	r30, 0x26	; 38
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	8c 93       	st	X, r24
		}
	}
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	ff 91       	pop	r31
    10c4:	ef 91       	pop	r30
    10c6:	bf 91       	pop	r27
    10c8:	af 91       	pop	r26
    10ca:	9f 91       	pop	r25
    10cc:	8f 91       	pop	r24
    10ce:	7f 91       	pop	r23
    10d0:	6f 91       	pop	r22
    10d2:	5f 91       	pop	r21
    10d4:	4f 91       	pop	r20
    10d6:	3f 91       	pop	r19
    10d8:	2f 91       	pop	r18
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDirection) {
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	2e 97       	sbiw	r28, 0x0e	; 14
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	8a 83       	std	Y+2, r24	; 0x02
    10fa:	6b 83       	std	Y+3, r22	; 0x03
    10fc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)) {
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	08 f0       	brcs	.+2      	; 0x110a <DIO_u8SetPinDirection+0x26>
    1108:	6a c1       	rjmp	.+724    	; 0x13de <DIO_u8SetPinDirection+0x2fa>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	08 f0       	brcs	.+2      	; 0x1112 <DIO_u8SetPinDirection+0x2e>
    1110:	66 c1       	rjmp	.+716    	; 0x13de <DIO_u8SetPinDirection+0x2fa>
		switch (Copy_u8PortId) {
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3e 87       	std	Y+14, r19	; 0x0e
    111a:	2d 87       	std	Y+13, r18	; 0x0d
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <DIO_u8SetPinDirection+0x44>
    1126:	68 c0       	rjmp	.+208    	; 0x11f8 <DIO_u8SetPinDirection+0x114>
    1128:	2d 85       	ldd	r18, Y+13	; 0x0d
    112a:	3e 85       	ldd	r19, Y+14	; 0x0e
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	2c f4       	brge	.+10     	; 0x113c <DIO_u8SetPinDirection+0x58>
    1132:	8d 85       	ldd	r24, Y+13	; 0x0d
    1134:	9e 85       	ldd	r25, Y+14	; 0x0e
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	71 f0       	breq	.+28     	; 0x1156 <DIO_u8SetPinDirection+0x72>
    113a:	52 c1       	rjmp	.+676    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
    113c:	2d 85       	ldd	r18, Y+13	; 0x0d
    113e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <DIO_u8SetPinDirection+0x64>
    1146:	a9 c0       	rjmp	.+338    	; 0x129a <DIO_u8SetPinDirection+0x1b6>
    1148:	8d 85       	ldd	r24, Y+13	; 0x0d
    114a:	9e 85       	ldd	r25, Y+14	; 0x0e
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <DIO_u8SetPinDirection+0x70>
    1152:	f4 c0       	rjmp	.+488    	; 0x133c <DIO_u8SetPinDirection+0x258>
    1154:	45 c1       	rjmp	.+650    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3c 87       	std	Y+12, r19	; 0x0c
    115e:	2b 87       	std	Y+11, r18	; 0x0b
    1160:	8b 85       	ldd	r24, Y+11	; 0x0b
    1162:	9c 85       	ldd	r25, Y+12	; 0x0c
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	89 f1       	breq	.+98     	; 0x11cc <DIO_u8SetPinDirection+0xe8>
    116a:	2b 85       	ldd	r18, Y+11	; 0x0b
    116c:	3c 85       	ldd	r19, Y+12	; 0x0c
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	29 f0       	breq	.+10     	; 0x117e <DIO_u8SetPinDirection+0x9a>
    1174:	8b 85       	ldd	r24, Y+11	; 0x0b
    1176:	9c 85       	ldd	r25, Y+12	; 0x0c
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	99 f0       	breq	.+38     	; 0x11a2 <DIO_u8SetPinDirection+0xbe>
    117c:	3b c0       	rjmp	.+118    	; 0x11f4 <DIO_u8SetPinDirection+0x110>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    117e:	ab e3       	ldi	r26, 0x3B	; 59
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	eb e3       	ldi	r30, 0x3B	; 59
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8SetPinDirection+0xb6>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	2a 95       	dec	r18
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8SetPinDirection+0xb2>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    11a2:	aa e3       	ldi	r26, 0x3A	; 58
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8SetPinDirection+0xdc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8SetPinDirection+0xd8>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	0a c1       	rjmp	.+532    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_u8SetPinDirection+0x106>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_u8SetPinDirection+0x102>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	f6 c0       	rjmp	.+492    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    11f4:	19 82       	std	Y+1, r1	; 0x01
    11f6:	f4 c0       	rjmp	.+488    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3a 87       	std	Y+10, r19	; 0x0a
    1200:	29 87       	std	Y+9, r18	; 0x09
    1202:	89 85       	ldd	r24, Y+9	; 0x09
    1204:	9a 85       	ldd	r25, Y+10	; 0x0a
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	89 f1       	breq	.+98     	; 0x126e <DIO_u8SetPinDirection+0x18a>
    120c:	29 85       	ldd	r18, Y+9	; 0x09
    120e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	29 f0       	breq	.+10     	; 0x1220 <DIO_u8SetPinDirection+0x13c>
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	99 f0       	breq	.+38     	; 0x1244 <DIO_u8SetPinDirection+0x160>
    121e:	3b c0       	rjmp	.+118    	; 0x1296 <DIO_u8SetPinDirection+0x1b2>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1220:	a8 e3       	ldi	r26, 0x38	; 56
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_u8SetPinDirection+0x158>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	2a 95       	dec	r18
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_u8SetPinDirection+0x154>
    1240:	84 2b       	or	r24, r20
    1242:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1244:	a7 e3       	ldi	r26, 0x37	; 55
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e7 e3       	ldi	r30, 0x37	; 55
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8SetPinDirection+0x17e>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_u8SetPinDirection+0x17a>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	b9 c0       	rjmp	.+370    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    126e:	a7 e3       	ldi	r26, 0x37	; 55
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e7 e3       	ldi	r30, 0x37	; 55
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_u8SetPinDirection+0x1a8>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_u8SetPinDirection+0x1a4>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	a5 c0       	rjmp	.+330    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	a3 c0       	rjmp	.+326    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	38 87       	std	Y+8, r19	; 0x08
    12a2:	2f 83       	std	Y+7, r18	; 0x07
    12a4:	8f 81       	ldd	r24, Y+7	; 0x07
    12a6:	98 85       	ldd	r25, Y+8	; 0x08
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	89 f1       	breq	.+98     	; 0x1310 <DIO_u8SetPinDirection+0x22c>
    12ae:	2f 81       	ldd	r18, Y+7	; 0x07
    12b0:	38 85       	ldd	r19, Y+8	; 0x08
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <DIO_u8SetPinDirection+0x1de>
    12b8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ba:	98 85       	ldd	r25, Y+8	; 0x08
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	99 f0       	breq	.+38     	; 0x12e6 <DIO_u8SetPinDirection+0x202>
    12c0:	3b c0       	rjmp	.+118    	; 0x1338 <DIO_u8SetPinDirection+0x254>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    12c2:	a5 e3       	ldi	r26, 0x35	; 53
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e3       	ldi	r30, 0x35	; 53
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_u8SetPinDirection+0x1fa>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	2a 95       	dec	r18
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_u8SetPinDirection+0x1f6>
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    12e6:	a4 e3       	ldi	r26, 0x34	; 52
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8SetPinDirection+0x220>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8SetPinDirection+0x21c>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	68 c0       	rjmp	.+208    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1310:	a4 e3       	ldi	r26, 0x34	; 52
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e4 e3       	ldi	r30, 0x34	; 52
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinDirection+0x24a>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinDirection+0x246>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	54 c0       	rjmp	.+168    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1338:	19 82       	std	Y+1, r1	; 0x01
    133a:	52 c0       	rjmp	.+164    	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3e 83       	std	Y+6, r19	; 0x06
    1344:	2d 83       	std	Y+5, r18	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	89 f1       	breq	.+98     	; 0x13b2 <DIO_u8SetPinDirection+0x2ce>
    1350:	2d 81       	ldd	r18, Y+5	; 0x05
    1352:	3e 81       	ldd	r19, Y+6	; 0x06
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	29 f0       	breq	.+10     	; 0x1364 <DIO_u8SetPinDirection+0x280>
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	99 f0       	breq	.+38     	; 0x1388 <DIO_u8SetPinDirection+0x2a4>
    1362:	3b c0       	rjmp	.+118    	; 0x13da <DIO_u8SetPinDirection+0x2f6>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1364:	a2 e3       	ldi	r26, 0x32	; 50
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e2 e3       	ldi	r30, 0x32	; 50
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_u8SetPinDirection+0x29c>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	2a 95       	dec	r18
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_u8SetPinDirection+0x298>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1388:	a1 e3       	ldi	r26, 0x31	; 49
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e1 e3       	ldi	r30, 0x31	; 49
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8SetPinDirection+0x2c2>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8SetPinDirection+0x2be>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	17 c0       	rjmp	.+46     	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    13b2:	a1 e3       	ldi	r26, 0x31	; 49
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_u8SetPinDirection+0x2ec>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_u8SetPinDirection+0x2e8>
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    13de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e2:	2e 96       	adiw	r28, 0x0e	; 14
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	2e 97       	sbiw	r28, 0x0e	; 14
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	6b 83       	std	Y+3, r22	; 0x03
    140c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	08 f0       	brcs	.+2      	; 0x141a <DIO_u8SetPinValue+0x26>
    1418:	0a c1       	rjmp	.+532    	; 0x162e <DIO_u8SetPinValue+0x23a>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	21 f0       	breq	.+8      	; 0x1428 <DIO_u8SetPinValue+0x34>
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <DIO_u8SetPinValue+0x34>
    1426:	03 c1       	rjmp	.+518    	; 0x162e <DIO_u8SetPinValue+0x23a>
			&& ((Copy_u8PinValue == DIO_u8_HIGH)
					|| (Copy_u8PinValue == DIO_u8_LOW))) {
		switch (Copy_u8PortId) {
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3e 87       	std	Y+14, r19	; 0x0e
    1430:	2d 87       	std	Y+13, r18	; 0x0d
    1432:	8d 85       	ldd	r24, Y+13	; 0x0d
    1434:	9e 85       	ldd	r25, Y+14	; 0x0e
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_u8SetPinValue+0x4a>
    143c:	4f c0       	rjmp	.+158    	; 0x14dc <DIO_u8SetPinValue+0xe8>
    143e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1440:	3e 85       	ldd	r19, Y+14	; 0x0e
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <DIO_u8SetPinValue+0x5e>
    1448:	8d 85       	ldd	r24, Y+13	; 0x0d
    144a:	9e 85       	ldd	r25, Y+14	; 0x0e
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	71 f0       	breq	.+28     	; 0x146c <DIO_u8SetPinValue+0x78>
    1450:	ec c0       	rjmp	.+472    	; 0x162a <DIO_u8SetPinValue+0x236>
    1452:	2d 85       	ldd	r18, Y+13	; 0x0d
    1454:	3e 85       	ldd	r19, Y+14	; 0x0e
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <DIO_u8SetPinValue+0x6a>
    145c:	77 c0       	rjmp	.+238    	; 0x154c <DIO_u8SetPinValue+0x158>
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	9e 85       	ldd	r25, Y+14	; 0x0e
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <DIO_u8SetPinValue+0x76>
    1468:	a9 c0       	rjmp	.+338    	; 0x15bc <DIO_u8SetPinValue+0x1c8>
    146a:	df c0       	rjmp	.+446    	; 0x162a <DIO_u8SetPinValue+0x236>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 87       	std	Y+12, r19	; 0x0c
    1474:	2b 87       	std	Y+11, r18	; 0x0b
    1476:	8b 85       	ldd	r24, Y+11	; 0x0b
    1478:	9c 85       	ldd	r25, Y+12	; 0x0c
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_u8SetPinValue+0xbe>
    147e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1480:	3c 85       	ldd	r19, Y+12	; 0x0c
    1482:	21 30       	cpi	r18, 0x01	; 1
    1484:	31 05       	cpc	r19, r1
    1486:	09 f0       	breq	.+2      	; 0x148a <DIO_u8SetPinValue+0x96>
    1488:	d3 c0       	rjmp	.+422    	; 0x1630 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    148a:	ab e3       	ldi	r26, 0x3B	; 59
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8SetPinValue+0xb4>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8SetPinValue+0xb0>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	bf c0       	rjmp	.+382    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    14b2:	ab e3       	ldi	r26, 0x3B	; 59
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e3       	ldi	r30, 0x3B	; 59
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8SetPinValue+0xdc>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8SetPinValue+0xd8>
    14d4:	80 95       	com	r24
    14d6:	84 23       	and	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	aa c0       	rjmp	.+340    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3a 87       	std	Y+10, r19	; 0x0a
    14e4:	29 87       	std	Y+9, r18	; 0x09
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	d1 f0       	breq	.+52     	; 0x1522 <DIO_u8SetPinValue+0x12e>
    14ee:	29 85       	ldd	r18, Y+9	; 0x09
    14f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14f2:	21 30       	cpi	r18, 0x01	; 1
    14f4:	31 05       	cpc	r19, r1
    14f6:	09 f0       	breq	.+2      	; 0x14fa <DIO_u8SetPinValue+0x106>
    14f8:	9b c0       	rjmp	.+310    	; 0x1630 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    14fa:	a8 e3       	ldi	r26, 0x38	; 56
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_u8SetPinValue+0x124>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_u8SetPinValue+0x120>
    151c:	84 2b       	or	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	87 c0       	rjmp	.+270    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1522:	a8 e3       	ldi	r26, 0x38	; 56
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e8 e3       	ldi	r30, 0x38	; 56
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_u8SetPinValue+0x14c>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_u8SetPinValue+0x148>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	72 c0       	rjmp	.+228    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	38 87       	std	Y+8, r19	; 0x08
    1554:	2f 83       	std	Y+7, r18	; 0x07
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	d1 f0       	breq	.+52     	; 0x1592 <DIO_u8SetPinValue+0x19e>
    155e:	2f 81       	ldd	r18, Y+7	; 0x07
    1560:	38 85       	ldd	r19, Y+8	; 0x08
    1562:	21 30       	cpi	r18, 0x01	; 1
    1564:	31 05       	cpc	r19, r1
    1566:	09 f0       	breq	.+2      	; 0x156a <DIO_u8SetPinValue+0x176>
    1568:	63 c0       	rjmp	.+198    	; 0x1630 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    156a:	a5 e3       	ldi	r26, 0x35	; 53
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e5 e3       	ldi	r30, 0x35	; 53
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_u8SetPinValue+0x194>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_u8SetPinValue+0x190>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	4f c0       	rjmp	.+158    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1592:	a5 e3       	ldi	r26, 0x35	; 53
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e3       	ldi	r30, 0x35	; 53
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_u8SetPinValue+0x1bc>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_u8SetPinValue+0x1b8>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	3a c0       	rjmp	.+116    	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3e 83       	std	Y+6, r19	; 0x06
    15c4:	2d 83       	std	Y+5, r18	; 0x05
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	c9 f0       	breq	.+50     	; 0x1600 <DIO_u8SetPinValue+0x20c>
    15ce:	2d 81       	ldd	r18, Y+5	; 0x05
    15d0:	3e 81       	ldd	r19, Y+6	; 0x06
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	31 05       	cpc	r19, r1
    15d6:	61 f5       	brne	.+88     	; 0x1630 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    15d8:	a2 e3       	ldi	r26, 0x32	; 50
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_u8SetPinValue+0x202>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_u8SetPinValue+0x1fe>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	18 c0       	rjmp	.+48     	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1600:	a2 e3       	ldi	r26, 0x32	; 50
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e2 e3       	ldi	r30, 0x32	; 50
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_u8SetPinValue+0x22a>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_u8SetPinValue+0x226>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <DIO_u8SetPinValue+0x23c>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    162e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
}
    1632:	2e 96       	adiw	r28, 0x0e	; 14
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 * Copy_Pu8ReteurnedValue) {
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	27 97       	sbiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	6b 83       	std	Y+3, r22	; 0x03
    165c:	5d 83       	std	Y+5, r21	; 0x05
    165e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1660:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_Pu8ReteurnedValue != NULL)) {
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 30       	cpi	r24, 0x08	; 8
    1666:	08 f0       	brcs	.+2      	; 0x166a <DIO_u8GetPinValue+0x26>
    1668:	79 c0       	rjmp	.+242    	; 0x175c <DIO_u8GetPinValue+0x118>
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	09 f4       	brne	.+2      	; 0x1674 <DIO_u8GetPinValue+0x30>
    1672:	74 c0       	rjmp	.+232    	; 0x175c <DIO_u8GetPinValue+0x118>
		Local_u8ErrorState = STD_TYPES_OK;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId) {
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3f 83       	std	Y+7, r19	; 0x07
    1680:	2e 83       	std	Y+6, r18	; 0x06
    1682:	4e 81       	ldd	r20, Y+6	; 0x06
    1684:	5f 81       	ldd	r21, Y+7	; 0x07
    1686:	41 30       	cpi	r20, 0x01	; 1
    1688:	51 05       	cpc	r21, r1
    168a:	59 f1       	breq	.+86     	; 0x16e2 <DIO_u8GetPinValue+0x9e>
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <DIO_u8GetPinValue+0x5e>
    1696:	2e 81       	ldd	r18, Y+6	; 0x06
    1698:	3f 81       	ldd	r19, Y+7	; 0x07
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	69 f0       	breq	.+26     	; 0x16ba <DIO_u8GetPinValue+0x76>
    16a0:	5c c0       	rjmp	.+184    	; 0x175a <DIO_u8GetPinValue+0x116>
    16a2:	4e 81       	ldd	r20, Y+6	; 0x06
    16a4:	5f 81       	ldd	r21, Y+7	; 0x07
    16a6:	42 30       	cpi	r20, 0x02	; 2
    16a8:	51 05       	cpc	r21, r1
    16aa:	79 f1       	breq	.+94     	; 0x170a <DIO_u8GetPinValue+0xc6>
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9f 81       	ldd	r25, Y+7	; 0x07
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8GetPinValue+0x74>
    16b6:	3d c0       	rjmp	.+122    	; 0x1732 <DIO_u8GetPinValue+0xee>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_u8GetPinValue+0x116>
		case DIO_u8_PORTA:
			*Copy_Pu8ReteurnedValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a9 01       	movw	r20, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_u8GetPinValue+0x8e>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_u8GetPinValue+0x8a>
    16d6:	ca 01       	movw	r24, r20
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	ec 81       	ldd	r30, Y+4	; 0x04
    16dc:	fd 81       	ldd	r31, Y+5	; 0x05
    16de:	80 83       	st	Z, r24
    16e0:	3d c0       	rjmp	.+122    	; 0x175c <DIO_u8GetPinValue+0x118>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReteurnedValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    16e2:	e6 e3       	ldi	r30, 0x36	; 54
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_u8GetPinValue+0xb6>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_u8GetPinValue+0xb2>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	ec 81       	ldd	r30, Y+4	; 0x04
    1704:	fd 81       	ldd	r31, Y+5	; 0x05
    1706:	80 83       	st	Z, r24
    1708:	29 c0       	rjmp	.+82     	; 0x175c <DIO_u8GetPinValue+0x118>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReteurnedValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    170a:	e3 e3       	ldi	r30, 0x33	; 51
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_u8GetPinValue+0xde>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_u8GetPinValue+0xda>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	ec 81       	ldd	r30, Y+4	; 0x04
    172c:	fd 81       	ldd	r31, Y+5	; 0x05
    172e:	80 83       	st	Z, r24
    1730:	15 c0       	rjmp	.+42     	; 0x175c <DIO_u8GetPinValue+0x118>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReteurnedValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8GetPinValue+0x106>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8GetPinValue+0x102>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	ec 81       	ldd	r30, Y+4	; 0x04
    1754:	fd 81       	ldd	r31, Y+5	; 0x05
    1756:	80 83       	st	Z, r24
    1758:	01 c0       	rjmp	.+2      	; 0x175c <DIO_u8GetPinValue+0x118>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    175a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
}
    175e:	27 96       	adiw	r28, 0x07	; 7
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_u8TogPinValue+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <DIO_u8TogPinValue+0x8>
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 30       	cpi	r24, 0x08	; 8
    178a:	08 f0       	brcs	.+2      	; 0x178e <DIO_u8TogPinValue+0x1e>
    178c:	71 c0       	rjmp	.+226    	; 0x1870 <DIO_u8TogPinValue+0x100>
		switch (Copy_u8PortId) {
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3d 83       	std	Y+5, r19	; 0x05
    1796:	2c 83       	std	Y+4, r18	; 0x04
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	49 f1       	breq	.+82     	; 0x17f4 <DIO_u8TogPinValue+0x84>
    17a2:	2c 81       	ldd	r18, Y+4	; 0x04
    17a4:	3d 81       	ldd	r19, Y+5	; 0x05
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <DIO_u8TogPinValue+0x46>
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <DIO_u8TogPinValue+0x5c>
    17b4:	5b c0       	rjmp	.+182    	; 0x186c <DIO_u8TogPinValue+0xfc>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	71 f1       	breq	.+92     	; 0x181c <DIO_u8TogPinValue+0xac>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	e9 f1       	breq	.+122    	; 0x1844 <DIO_u8TogPinValue+0xd4>
    17ca:	50 c0       	rjmp	.+160    	; 0x186c <DIO_u8TogPinValue+0xfc>
		case DIO_u8_PORTA:
			TOG_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    17cc:	ab e3       	ldi	r26, 0x3B	; 59
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8TogPinValue+0x7a>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_u8TogPinValue+0x76>
    17ee:	84 27       	eor	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <DIO_u8TogPinValue+0x102>
			break;
		case DIO_u8_PORTB:
			TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    17f4:	a8 e3       	ldi	r26, 0x38	; 56
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e8 e3       	ldi	r30, 0x38	; 56
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_u8TogPinValue+0xa2>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_u8TogPinValue+0x9e>
    1816:	84 27       	eor	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	2b c0       	rjmp	.+86     	; 0x1872 <DIO_u8TogPinValue+0x102>
			break;
		case DIO_u8_PORTC:
			TOG_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    181c:	a5 e3       	ldi	r26, 0x35	; 53
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e3       	ldi	r30, 0x35	; 53
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_u8TogPinValue+0xca>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_u8TogPinValue+0xc6>
    183e:	84 27       	eor	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	17 c0       	rjmp	.+46     	; 0x1872 <DIO_u8TogPinValue+0x102>
			break;
		case DIO_u8_PORTD:
			TOG_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1844:	a2 e3       	ldi	r26, 0x32	; 50
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e2 e3       	ldi	r30, 0x32	; 50
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_u8TogPinValue+0xf2>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_u8TogPinValue+0xee>
    1866:	84 27       	eor	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <DIO_u8TogPinValue+0x102>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    186c:	19 82       	std	Y+1, r1	; 0x01
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <DIO_u8TogPinValue+0x102>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1870:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection) {
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	2d 97       	sbiw	r28, 0x0d	; 13
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId) {
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	3d 87       	std	Y+13, r19	; 0x0d
    18a8:	2c 87       	std	Y+12, r18	; 0x0c
    18aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	91 05       	cpc	r25, r1
    18b2:	d1 f1       	breq	.+116    	; 0x1928 <DIO_u8SetPortDirection+0xa4>
    18b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <DIO_u8SetPortDirection+0x44>
    18be:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	71 f0       	breq	.+28     	; 0x18e2 <DIO_u8SetPortDirection+0x5e>
    18c6:	99 c0       	rjmp	.+306    	; 0x19fa <DIO_u8SetPortDirection+0x176>
    18c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <DIO_u8SetPortDirection+0x50>
    18d2:	4d c0       	rjmp	.+154    	; 0x196e <DIO_u8SetPortDirection+0xea>
    18d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <DIO_u8SetPortDirection+0x5c>
    18de:	6a c0       	rjmp	.+212    	; 0x19b4 <DIO_u8SetPortDirection+0x130>
    18e0:	8c c0       	rjmp	.+280    	; 0x19fa <DIO_u8SetPortDirection+0x176>
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection) {
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3b 87       	std	Y+11, r19	; 0x0b
    18ea:	2a 87       	std	Y+10, r18	; 0x0a
    18ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	91 f0       	breq	.+36     	; 0x191a <DIO_u8SetPortDirection+0x96>
    18f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    18f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	29 f0       	breq	.+10     	; 0x190a <DIO_u8SetPortDirection+0x86>
    1900:	8a 85       	ldd	r24, Y+10	; 0x0a
    1902:	9b 85       	ldd	r25, Y+11	; 0x0b
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	29 f0       	breq	.+10     	; 0x1912 <DIO_u8SetPortDirection+0x8e>
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <DIO_u8SetPortDirection+0xa0>
		case DIO_u8_INPUT_PULLED_UP:
			DIO_u8_PORTA_REG = 0xff;
    190a:	eb e3       	ldi	r30, 0x3B	; 59
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRA_REG = 0x00;
    1912:	ea e3       	ldi	r30, 0x3A	; 58
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	10 82       	st	Z, r1
    1918:	71 c0       	rjmp	.+226    	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = 0xff;
    191a:	ea e3       	ldi	r30, 0x3A	; 58
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	80 83       	st	Z, r24
    1922:	6c c0       	rjmp	.+216    	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	6a c0       	rjmp	.+212    	; 0x19fc <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection) {
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	39 87       	std	Y+9, r19	; 0x09
    1930:	28 87       	std	Y+8, r18	; 0x08
    1932:	88 85       	ldd	r24, Y+8	; 0x08
    1934:	99 85       	ldd	r25, Y+9	; 0x09
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	91 f0       	breq	.+36     	; 0x1960 <DIO_u8SetPortDirection+0xdc>
    193c:	28 85       	ldd	r18, Y+8	; 0x08
    193e:	39 85       	ldd	r19, Y+9	; 0x09
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	29 f0       	breq	.+10     	; 0x1950 <DIO_u8SetPortDirection+0xcc>
    1946:	88 85       	ldd	r24, Y+8	; 0x08
    1948:	99 85       	ldd	r25, Y+9	; 0x09
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	29 f0       	breq	.+10     	; 0x1958 <DIO_u8SetPortDirection+0xd4>
    194e:	0d c0       	rjmp	.+26     	; 0x196a <DIO_u8SetPortDirection+0xe6>
		case DIO_u8_INPUT_PULLED_UP:
			DIO_u8_PORTB_REG = 0xff;
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRB_REG = 0x00;
    1958:	e7 e3       	ldi	r30, 0x37	; 55
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	10 82       	st	Z, r1
    195e:	4e c0       	rjmp	.+156    	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = 0xff;
    1960:	e7 e3       	ldi	r30, 0x37	; 55
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	80 83       	st	Z, r24
    1968:	49 c0       	rjmp	.+146    	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	47 c0       	rjmp	.+142    	; 0x19fc <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection) {
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3f 83       	std	Y+7, r19	; 0x07
    1976:	2e 83       	std	Y+6, r18	; 0x06
    1978:	8e 81       	ldd	r24, Y+6	; 0x06
    197a:	9f 81       	ldd	r25, Y+7	; 0x07
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	91 f0       	breq	.+36     	; 0x19a6 <DIO_u8SetPortDirection+0x122>
    1982:	2e 81       	ldd	r18, Y+6	; 0x06
    1984:	3f 81       	ldd	r19, Y+7	; 0x07
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	29 f0       	breq	.+10     	; 0x1996 <DIO_u8SetPortDirection+0x112>
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	9f 81       	ldd	r25, Y+7	; 0x07
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	29 f0       	breq	.+10     	; 0x199e <DIO_u8SetPortDirection+0x11a>
    1994:	0d c0       	rjmp	.+26     	; 0x19b0 <DIO_u8SetPortDirection+0x12c>
		case DIO_u8_INPUT_PULLED_UP:
			DIO_u8_PORTC_REG = 0xff;
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRC_REG = 0x00;
    199e:	e4 e3       	ldi	r30, 0x34	; 52
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	10 82       	st	Z, r1
    19a4:	2b c0       	rjmp	.+86     	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = 0xff;
    19a6:	e4 e3       	ldi	r30, 0x34	; 52
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	80 83       	st	Z, r24
    19ae:	26 c0       	rjmp	.+76     	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	24 c0       	rjmp	.+72     	; 0x19fc <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection) {
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	91 f0       	breq	.+36     	; 0x19ec <DIO_u8SetPortDirection+0x168>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	29 f0       	breq	.+10     	; 0x19dc <DIO_u8SetPortDirection+0x158>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <DIO_u8SetPortDirection+0x160>
    19da:	0d c0       	rjmp	.+26     	; 0x19f6 <DIO_u8SetPortDirection+0x172>
		case DIO_u8_INPUT_PULLED_UP:
			DIO_u8_PORTD_REG = 0xff;
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRD_REG = 0x00;
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	10 82       	st	Z, r1
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = 0xff;
    19ec:	e1 e3       	ldi	r30, 0x31	; 49
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	80 83       	st	Z, r24
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    19f6:	19 82       	std	Y+1, r1	; 0x01
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <DIO_u8SetPortDirection+0x178>
		}
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOK;
    19fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	2d 96       	adiw	r28, 0x0d	; 13
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_u8SetPortValue+0x6>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <DIO_u8SetPortValue+0x8>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3d 83       	std	Y+5, r19	; 0x05
    1a2e:	2c 83       	std	Y+4, r18	; 0x04
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	d1 f0       	breq	.+52     	; 0x1a6e <DIO_u8SetPortValue+0x5e>
    1a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <DIO_u8SetPortValue+0x3e>
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <DIO_u8SetPortValue+0x54>
    1a4c:	1f c0       	rjmp	.+62     	; 0x1a8c <DIO_u8SetPortValue+0x7c>
    1a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a50:	3d 81       	ldd	r19, Y+5	; 0x05
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	81 f0       	breq	.+32     	; 0x1a78 <DIO_u8SetPortValue+0x68>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	91 05       	cpc	r25, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <DIO_u8SetPortValue+0x72>
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    1a64:	eb e3       	ldi	r30, 0x3B	; 59
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	80 83       	st	Z, r24
    1a6c:	10 c0       	rjmp	.+32     	; 0x1a8e <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	80 83       	st	Z, r24
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    1a78:	e5 e3       	ldi	r30, 0x35	; 53
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	80 83       	st	Z, r24
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1a82:	e2 e3       	ldi	r30, 0x32	; 50
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	80 83       	st	Z, r24
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <DIO_u8SetPortValue+0x7e>
	default          :Local_u8ErrorState = STD_TYPES_NOK;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 * Copy_Pu8PortValue)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <DIO_u8GetPortValue+0x6>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <DIO_u8GetPortValue+0x8>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <DIO_u8GetPortValue+0xa>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	7c 83       	std	Y+4, r23	; 0x04
    1ab2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8PortValue != NULL)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	e9 f1       	breq	.+122    	; 0x1b3a <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId){
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3e 83       	std	Y+6, r19	; 0x06
    1ac8:	2d 83       	std	Y+5, r18	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <DIO_u8GetPortValue+0x6c>
    1ad4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <DIO_u8GetPortValue+0x48>
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <DIO_u8GetPortValue+0x5e>
    1ae6:	27 c0       	rjmp	.+78     	; 0x1b36 <DIO_u8GetPortValue+0x96>
    1ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aea:	3e 81       	ldd	r19, Y+6	; 0x06
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	a1 f0       	breq	.+40     	; 0x1b1a <DIO_u8GetPortValue+0x7a>
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	b1 f0       	breq	.+44     	; 0x1b28 <DIO_u8GetPortValue+0x88>
    1afc:	1c c0       	rjmp	.+56     	; 0x1b36 <DIO_u8GetPortValue+0x96>
		case DIO_u8_PORTA:*Copy_Pu8PortValue = DIO_u8_PINA_REG;break;
    1afe:	e9 e3       	ldi	r30, 0x39	; 57
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	eb 81       	ldd	r30, Y+3	; 0x03
    1b06:	fc 81       	ldd	r31, Y+4	; 0x04
    1b08:	80 83       	st	Z, r24
    1b0a:	18 c0       	rjmp	.+48     	; 0x1b3c <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTB:*Copy_Pu8PortValue = DIO_u8_PINB_REG;break;
    1b0c:	e6 e3       	ldi	r30, 0x36	; 54
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	eb 81       	ldd	r30, Y+3	; 0x03
    1b14:	fc 81       	ldd	r31, Y+4	; 0x04
    1b16:	80 83       	st	Z, r24
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTC:*Copy_Pu8PortValue = DIO_u8_PINC_REG;break;
    1b1a:	e3 e3       	ldi	r30, 0x33	; 51
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	80 83       	st	Z, r24
    1b26:	0a c0       	rjmp	.+20     	; 0x1b3c <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTD:*Copy_Pu8PortValue = DIO_u8_PIND_REG;break;
    1b28:	e0 e3       	ldi	r30, 0x30	; 48
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b30:	fc 81       	ldd	r31, Y+4	; 0x04
    1b32:	80 83       	st	Z, r24
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <DIO_u8GetPortValue+0x9c>
		default          : Local_u8ErrorState = STD_TYPES_NOK;
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3e:	26 96       	adiw	r28, 0x06	; 6
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <DIO_u8INIT>:

void DIO_u8INIT         (void)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    1b58:	ea e3       	ldi	r30, 0x3A	; 58
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8e e0       	ldi	r24, 0x0E	; 14
    1b5e:	80 83       	st	Z, r24
		                              DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

	DIO_u8_DDRB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    1b60:	e7 e3       	ldi	r30, 0x37	; 55
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8f e0       	ldi	r24, 0x0F	; 15
    1b66:	80 83       	st	Z, r24
		                              DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

	DIO_u8_DDRC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    1b68:	e4 e3       	ldi	r30, 0x34	; 52
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	80 83       	st	Z, r24
		                              DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

	DIO_u8_DDRD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    1b70:	e1 e3       	ldi	r30, 0x31	; 49
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8e ef       	ldi	r24, 0xFE	; 254
    1b76:	80 83       	st	Z, r24
		                              DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

	DIO_u8_PORTA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
    1b78:	eb e3       	ldi	r30, 0x3B	; 59
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	10 82       	st	Z, r1
		                              DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

	DIO_u8_PORTB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
    1b7e:	e8 e3       	ldi	r30, 0x38	; 56
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	87 ef       	ldi	r24, 0xF7	; 247
    1b84:	80 83       	st	Z, r24
		                              DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

	DIO_u8_PORTC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
    1b86:	e5 e3       	ldi	r30, 0x35	; 53
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	10 82       	st	Z, r1
		                              DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

	DIO_u8_PORTD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
    1b8c:	e2 e3       	ldi	r30, 0x32	; 50
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 e8       	ldi	r24, 0x80	; 128
    1b92:	80 83       	st	Z, r24
		                              DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <EEPROM_WriteByte>:
#include"EEPROM_privare.h"
#include"EEPORM_config.h"


u8 EEPROM_WriteByte(u16 copy_u8EEPROMHWAdd, u8 copy_u8Data)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <EEPROM_WriteByte+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <EEPROM_WriteByte+0x8>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	6b 83       	std	Y+3, r22	; 0x03
	I2C_SendStartCondition();
    1bac:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <I2C_SendStartCondition>
	I2C_SendSlaveAddressWithWrire(0b01010<<3|A2_PIN|copy_u8EEPROMHWAdd>>8);
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	89 2f       	mov	r24, r25
    1bb6:	99 27       	eor	r25, r25
    1bb8:	80 65       	ori	r24, 0x50	; 80
    1bba:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <I2C_SendSlaveAddressWithWrire>
	I2C_MasterWriteDataByte((u8)copy_u8EEPROMHWAdd);
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <I2C_MasterWriteDataByte>
	I2C_MasterWriteDataByte(copy_u8Data);
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <I2C_MasterWriteDataByte>
	I2C_SendStopCondition();
    1bca:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <I2C_SendStopCondition>
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <EEPROM_ReadByte>:

u8 EEPROM_ReadByte(u8* copy_u8ReadData, u16 copy_u8EEPROMHWAdd)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EEPROM_ReadByte+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <EEPROM_ReadByte+0x8>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	7c 83       	std	Y+4, r23	; 0x04
    1bf0:	6b 83       	std	Y+3, r22	; 0x03
	I2C_SendStartCondition();
    1bf2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <I2C_SendStartCondition>
	I2C_SendSlaveAddressWithWrire(0b01010<<3|A2_PIN|copy_u8EEPROMHWAdd>>8);
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	89 2f       	mov	r24, r25
    1bfc:	99 27       	eor	r25, r25
    1bfe:	80 65       	ori	r24, 0x50	; 80
    1c00:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <I2C_SendSlaveAddressWithWrire>
	I2C_MasterWriteDataByte((u8)copy_u8EEPROMHWAdd);
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <I2C_MasterWriteDataByte>
    I2C_SendRepeatedStart();
    1c0a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <I2C_SendRepeatedStart>
    I2C_SendSlaveAddressWithRead(0b01010<<3|A2_PIN|copy_u8EEPROMHWAdd>>8);
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	89 2f       	mov	r24, r25
    1c14:	99 27       	eor	r25, r25
    1c16:	80 65       	ori	r24, 0x50	; 80
    1c18:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <I2C_SendSlaveAddressWithRead>
    I2C_MasterReadDataByte(copy_u8ReadData);
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <I2C_MasterReadDataByte>
    I2C_SendStopCondition();
    1c24:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <I2C_SendStopCondition>

}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <I2C_voidInitMaster>:
#include "I2C_interface.h"
#include "I2C_private.h"


void I2C_voidInitMaster(u8 Copy_u8SalveAddress)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
	/* Set clock freq to 400kbps */

	/* Set TWBR to 2 */
	TWBR = 2;
    1c44:	e0 e2       	ldi	r30, 0x20	; 32
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	80 83       	st	Z, r24
	/* Clear TWPS */
	CLR_BIT(TWSR,TWSR_TWPS1);
    1c4c:	a1 e2       	ldi	r26, 0x21	; 33
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e2       	ldi	r30, 0x21	; 33
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8d 7f       	andi	r24, 0xFD	; 253
    1c58:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    1c5a:	a1 e2       	ldi	r26, 0x21	; 33
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e1 e2       	ldi	r30, 0x21	; 33
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8e 7f       	andi	r24, 0xFE	; 254
    1c66:	8c 93       	st	X, r24
	/* Set address */
	if (Copy_u8SalveAddress != 0)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	88 23       	and	r24, r24
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <I2C_voidInitMaster+0x40>
	{
		TWAR = Copy_u8SalveAddress<<1;
    1c6e:	e2 e2       	ldi	r30, 0x22	; 34
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	88 0f       	add	r24, r24
    1c76:	80 83       	st	Z, r24
	}
	//SET_BIT(TWCR,TWCR_TWEA);
	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    1c78:	a6 e5       	ldi	r26, 0x56	; 86
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e6 e5       	ldi	r30, 0x56	; 86
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	8c 93       	st	X, r24

}
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <I2C_voidInitSlave>:

void I2C_voidInitSlave(u8 Copy_u8SlaveAddress)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	0f 92       	push	r0
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	89 83       	std	Y+1, r24	; 0x01
	/* Init slave address */
	TWAR = Copy_u8SlaveAddress<<1;
    1c9a:	e2 e2       	ldi	r30, 0x22	; 34
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	88 0f       	add	r24, r24
    1ca2:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
    1ca4:	a6 e5       	ldi	r26, 0x56	; 86
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e5       	ldi	r30, 0x56	; 86
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	84 60       	ori	r24, 0x04	; 4
    1cb0:	8c 93       	st	X, r24
}
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <I2C_SendStartCondition>:

I2C_ErrSatus I2C_SendStartCondition(void)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	0f 92       	push	r0
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
	I2C_ErrSatus Local_ErrStatus = NoError;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
	/* Send start condition */
	SET_BIT(TWCR,TWCR_TWSTA);
    1cc6:	a6 e5       	ldi	r26, 0x56	; 86
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e6 e5       	ldi	r30, 0x56	; 86
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 62       	ori	r24, 0x20	; 32
    1cd2:	8c 93       	st	X, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1cd4:	a6 e5       	ldi	r26, 0x56	; 86
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e6 e5       	ldi	r30, 0x56	; 86
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 68       	ori	r24, 0x80	; 128
    1ce0:	8c 93       	st	X, r24
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1ce2:	e6 e5       	ldi	r30, 0x56	; 86
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 23       	and	r24, r24
    1cea:	dc f7       	brge	.-10     	; 0x1ce2 <I2C_SendStartCondition+0x28>

	if ((TWSR & 0xFB) != START_ACK)
    1cec:	e1 e2       	ldi	r30, 0x21	; 33
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	8b 7f       	andi	r24, 0xFB	; 251
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	88 30       	cpi	r24, 0x08	; 8
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <I2C_SendStartCondition+0x4a>
	{
		Local_ErrStatus = StartConditionError;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrStatus;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <I2C_SendRepeatedStart>:

I2C_ErrSatus I2C_SendRepeatedStart(void)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	I2C_ErrSatus Local_ErrStatus = NoError;
    1d18:	19 82       	std	Y+1, r1	; 0x01
	/* Send start condition */
	SET_BIT(TWCR,TWCR_TWSTA);
    1d1a:	a6 e5       	ldi	r26, 0x56	; 86
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e6 e5       	ldi	r30, 0x56	; 86
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 62       	ori	r24, 0x20	; 32
    1d26:	8c 93       	st	X, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1d28:	a6 e5       	ldi	r26, 0x56	; 86
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e6 e5       	ldi	r30, 0x56	; 86
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	8c 93       	st	X, r24
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1d36:	e6 e5       	ldi	r30, 0x56	; 86
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 23       	and	r24, r24
    1d3e:	dc f7       	brge	.-10     	; 0x1d36 <I2C_SendRepeatedStart+0x28>
	if ((TWSR & 0xFB) != REPEATED_START_ACK)
    1d40:	e1 e2       	ldi	r30, 0x21	; 33
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	8b 7f       	andi	r24, 0xFB	; 251
    1d4c:	90 70       	andi	r25, 0x00	; 0
    1d4e:	80 31       	cpi	r24, 0x10	; 16
    1d50:	91 05       	cpc	r25, r1
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <I2C_SendRepeatedStart+0x4a>
	{
		Local_ErrStatus = RepeatedStartError;
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrStatus;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <I2C_SendSlaveAddressWithWrire>:

I2C_ErrSatus I2C_SendSlaveAddressWithWrire(u8 Copy_u8SlaveAddress)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <I2C_SendSlaveAddressWithWrire+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
	I2C_ErrSatus Local_ErrStatus = NoError;
    1d6e:	19 82       	std	Y+1, r1	; 0x01
	/* Sens slave address */
	TWDR = Copy_u8SlaveAddress<<1;
    1d70:	e3 e2       	ldi	r30, 0x23	; 35
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	88 0f       	add	r24, r24
    1d78:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    1d7a:	a3 e2       	ldi	r26, 0x23	; 35
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e2       	ldi	r30, 0x23	; 35
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8e 7f       	andi	r24, 0xFE	; 254
    1d86:	8c 93       	st	X, r24
	/* Clear start cond bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    1d88:	a6 e5       	ldi	r26, 0x56	; 86
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e6 e5       	ldi	r30, 0x56	; 86
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 7d       	andi	r24, 0xDF	; 223
    1d94:	8c 93       	st	X, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1d96:	a6 e5       	ldi	r26, 0x56	; 86
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e5       	ldi	r30, 0x56	; 86
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 68       	ori	r24, 0x80	; 128
    1da2:	8c 93       	st	X, r24
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <I2C_SendSlaveAddressWithWrire+0x46>
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0)
		{asm("NOP");}
    1da6:	00 00       	nop
	/* Clear start cond bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0)
    1da8:	e6 e5       	ldi	r30, 0x56	; 86
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	d4 f7       	brge	.-12     	; 0x1da6 <I2C_SendSlaveAddressWithWrire+0x44>
		{asm("NOP");}
	if ((TWSR & 0xFB) != SLAVE_ADD_AND_WR_ACK)
    1db2:	e1 e2       	ldi	r30, 0x21	; 33
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	8b 7f       	andi	r24, 0xFB	; 251
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	88 31       	cpi	r24, 0x18	; 24
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	11 f0       	breq	.+4      	; 0x1dca <I2C_SendSlaveAddressWithWrire+0x68>
	{
		Local_ErrStatus = SlaveAddressWithWriteErr;
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrStatus;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <I2C_SendSlaveAddressWithRead>:

I2C_ErrSatus I2C_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <I2C_SendSlaveAddressWithRead+0x6>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	8a 83       	std	Y+2, r24	; 0x02
	I2C_ErrSatus Local_ErrStatus = NoError;
    1de2:	19 82       	std	Y+1, r1	; 0x01

	/* Sens slave address */
	TWDR = Copy_u8SlaveAddress<<1;
    1de4:	e3 e2       	ldi	r30, 0x23	; 35
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	88 0f       	add	r24, r24
    1dec:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    1dee:	a3 e2       	ldi	r26, 0x23	; 35
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e3 e2       	ldi	r30, 0x23	; 35
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	81 60       	ori	r24, 0x01	; 1
    1dfa:	8c 93       	st	X, r24
	/* Clear start cond bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    1dfc:	a6 e5       	ldi	r26, 0x56	; 86
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e6 e5       	ldi	r30, 0x56	; 86
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8f 7d       	andi	r24, 0xDF	; 223
    1e08:	8c 93       	st	X, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1e0a:	a6 e5       	ldi	r26, 0x56	; 86
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e6 e5       	ldi	r30, 0x56	; 86
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	8c 93       	st	X, r24
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1e18:	e6 e5       	ldi	r30, 0x56	; 86
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	88 23       	and	r24, r24
    1e20:	dc f7       	brge	.-10     	; 0x1e18 <I2C_SendSlaveAddressWithRead+0x42>
	if ((TWSR & 0xFB) != SLAVE_ADD_AND_RD_ACK)
    1e22:	e1 e2       	ldi	r30, 0x21	; 33
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	8b 7f       	andi	r24, 0xFB	; 251
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	80 34       	cpi	r24, 0x40	; 64
    1e32:	91 05       	cpc	r25, r1
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <I2C_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrStatus = SlaveAddressWithReadErr;
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrStatus;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <I2C_MasterWriteDataByte>:

I2C_ErrSatus I2C_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <I2C_MasterWriteDataByte+0x6>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	I2C_ErrSatus Local_ErrStatus = NoError;
    1e52:	19 82       	std	Y+1, r1	; 0x01
	/* Send Data */
	TWDR = Copy_u8DataByte;
    1e54:	e3 e2       	ldi	r30, 0x23	; 35
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1e5c:	a6 e5       	ldi	r26, 0x56	; 86
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e6 e5       	ldi	r30, 0x56	; 86
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	80 68       	ori	r24, 0x80	; 128
    1e68:	8c 93       	st	X, r24
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <I2C_MasterWriteDataByte+0x28>
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0)
	{
		asm("NOP");
    1e6c:	00 00       	nop
	/* Send Data */
	TWDR = Copy_u8DataByte;
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0)
    1e6e:	e6 e5       	ldi	r30, 0x56	; 86
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	88 23       	and	r24, r24
    1e76:	d4 f7       	brge	.-12     	; 0x1e6c <I2C_MasterWriteDataByte+0x26>
	{
		asm("NOP");
	}
	//DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
	if ((TWSR & 0xFB) != MSTR_WR_BYTE_ACK)
    1e78:	e1 e2       	ldi	r30, 0x21	; 33
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	8b 7f       	andi	r24, 0xFB	; 251
    1e84:	90 70       	andi	r25, 0x00	; 0
    1e86:	88 32       	cpi	r24, 0x28	; 40
    1e88:	91 05       	cpc	r25, r1
    1e8a:	11 f0       	breq	.+4      	; 0x1e90 <I2C_MasterWriteDataByte+0x4a>
	{
		Local_ErrStatus = MasterWriteDataByteErr;
    1e8c:	85 e0       	ldi	r24, 0x05	; 5
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrStatus;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <I2C_MasterReadDataByte>:

I2C_ErrSatus I2C_MasterReadDataByte(u8 *Copy_pu8DataByte)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <I2C_MasterReadDataByte+0x6>
    1ea2:	0f 92       	push	r0
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9b 83       	std	Y+3, r25	; 0x03
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
	I2C_ErrSatus Local_ErrStatus = NoError;
    1eac:	19 82       	std	Y+1, r1	; 0x01
	/* Enable master generating Acknowledge */
	//SET_BIT(TWCR,TWCR_TWEA);
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1eae:	a6 e5       	ldi	r26, 0x56	; 86
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e6 e5       	ldi	r30, 0x56	; 86
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 68       	ori	r24, 0x80	; 128
    1eba:	8c 93       	st	X, r24
	/* Wait until INT flag is raised again */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1ebc:	e6 e5       	ldi	r30, 0x56	; 86
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	dc f7       	brge	.-10     	; 0x1ebc <I2C_MasterReadDataByte+0x20>
	//DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
	if ((TWSR & 0xFB) != MSTR_RD_BYTE_WITH_NACK)
    1ec6:	e1 e2       	ldi	r30, 0x21	; 33
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	8b 7f       	andi	r24, 0xFB	; 251
    1ed2:	90 70       	andi	r25, 0x00	; 0
    1ed4:	88 35       	cpi	r24, 0x58	; 88
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	19 f0       	breq	.+6      	; 0x1ee0 <I2C_MasterReadDataByte+0x44>
	{
		Local_ErrStatus = MasterReadDataByteErr;
    1eda:	86 e0       	ldi	r24, 0x06	; 6
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <I2C_MasterReadDataByte+0x50>
		//DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
	}
	else
	{
		*Copy_pu8DataByte = TWDR;
    1ee0:	e3 e2       	ldi	r30, 0x23	; 35
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	80 83       	st	Z, r24
		//DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
	}

	return Local_ErrStatus;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(TWCR,TWCR_TWEA);
	/* Send stop condition */
	SET_BIT(TWCR,TWCR_TWSTO);
    1f02:	a6 e5       	ldi	r26, 0x56	; 86
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e6 e5       	ldi	r30, 0x56	; 86
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 61       	ori	r24, 0x10	; 16
    1f0e:	8c 93       	st	X, r24
	/* Clear the interrupt flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1f10:	a6 e5       	ldi	r26, 0x56	; 86
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e5       	ldi	r30, 0x56	; 86
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 68       	ori	r24, 0x80	; 128
    1f1c:	8c 93       	st	X, r24
}
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <KPD_u8GetKey>:
static u8 KPD_Au8ColPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};
static u8 KPD_Au8ColPorts[4]={KPD_u8_C1_PORT,KPD_u8_C2_PORT,KPD_u8_C3_PORT,KPD_u8_C4_PORT};

static u8 KPD_Au8Keys[4][4]= KPD_KEYS;

u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey){
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	65 97       	sbiw	r28, 0x15	; 21
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9d 8b       	std	Y+21, r25	; 0x15
    1f3a:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter,Local_u8ColCounter,Local_u8PinValue,Local_u8Flag = 0;
    1f40:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1f42:	8c 89       	ldd	r24, Y+20	; 0x14
    1f44:	9d 89       	ldd	r25, Y+21	; 0x15
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <KPD_u8GetKey+0x28>
    1f4a:	fd c0       	rjmp	.+506    	; 0x2146 <KPD_u8GetKey+0x222>
	{
		/* Apply KPD Algo */
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1f4c:	ec 89       	ldd	r30, Y+20	; 0x14
    1f4e:	fd 89       	ldd	r31, Y+21	; 0x15
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	80 83       	st	Z, r24
		/* Activate Each row then Check The Columns */
		for(Local_u8RowCounter = 0; Local_u8RowCounter < 4 ; Local_u8RowCounter++){
    1f54:	19 8a       	std	Y+17, r1	; 0x11
    1f56:	f2 c0       	rjmp	.+484    	; 0x213c <KPD_u8GetKey+0x218>
			/* Activate the ROW */
			DIO_u8SetPinValue(KPD_Au8RowPorts[Local_u8RowCounter],KPD_Au8RowPins[Local_u8RowCounter],DIO_u8_LOW);
    1f58:	89 89       	ldd	r24, Y+17	; 0x11
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e6 5d       	subi	r30, 0xD6	; 214
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	20 81       	ld	r18, Z
    1f66:	89 89       	ldd	r24, Y+17	; 0x11
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	ea 5d       	subi	r30, 0xDA	; 218
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	90 81       	ld	r25, Z
    1f74:	82 2f       	mov	r24, r18
    1f76:	69 2f       	mov	r22, r25
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
			for(Local_u8ColCounter = 0 ; Local_u8ColCounter < 4 ; Local_u8ColCounter++)
    1f7e:	18 8a       	std	Y+16, r1	; 0x10
    1f80:	c0 c0       	rjmp	.+384    	; 0x2102 <KPD_u8GetKey+0x1de>
			{
				/* Check Columns Values */
				DIO_u8GetPinValue(KPD_Au8ColPorts[Local_u8ColCounter],KPD_Au8ColPins[Local_u8ColCounter],&Local_u8PinValue);
    1f82:	88 89       	ldd	r24, Y+16	; 0x10
    1f84:	88 2f       	mov	r24, r24
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	fc 01       	movw	r30, r24
    1f8a:	ee 5c       	subi	r30, 0xCE	; 206
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	40 81       	ld	r20, Z
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	fc 01       	movw	r30, r24
    1f98:	e2 5d       	subi	r30, 0xD2	; 210
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	90 81       	ld	r25, Z
    1f9e:	9e 01       	movw	r18, r28
    1fa0:	2d 5e       	subi	r18, 0xED	; 237
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	84 2f       	mov	r24, r20
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	a9 01       	movw	r20, r18
    1faa:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_u8GetPinValue>
				/* Check if pin value is Low */
				if(Local_u8PinValue == DIO_u8_LOW)/* Key Pressed */
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	88 23       	and	r24, r24
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <KPD_u8GetKey+0x92>
    1fb4:	a3 c0       	rjmp	.+326    	; 0x20fc <KPD_u8GetKey+0x1d8>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 ea       	ldi	r26, 0xA0	; 160
    1fbc:	b1 e4       	ldi	r27, 0x41	; 65
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <KPD_u8GetKey+0xe4>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <KPD_u8GetKey+0x162>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <KPD_u8GetKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <KPD_u8GetKey+0x144>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <KPD_u8GetKey+0x132>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <KPD_u8GetKey+0x126>
    2070:	2b c0       	rjmp	.+86     	; 0x20c8 <KPD_u8GetKey+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <KPD_u8GetKey+0x16e>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	16 c0       	rjmp	.+44     	; 0x20c8 <KPD_u8GetKey+0x1a4>
				{
					/* Debouncing */
					_delay_ms(20);
					/* Wait for Pin Goes High */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_Au8ColPorts[Local_u8ColCounter],KPD_Au8ColPins[Local_u8ColCounter],&Local_u8PinValue);
    209c:	88 89       	ldd	r24, Y+16	; 0x10
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	fc 01       	movw	r30, r24
    20a4:	ee 5c       	subi	r30, 0xCE	; 206
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	40 81       	ld	r20, Z
    20aa:	88 89       	ldd	r24, Y+16	; 0x10
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	e2 5d       	subi	r30, 0xD2	; 210
    20b4:	fe 4f       	sbci	r31, 0xFE	; 254
    20b6:	90 81       	ld	r25, Z
    20b8:	9e 01       	movw	r18, r28
    20ba:	2d 5e       	subi	r18, 0xED	; 237
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	84 2f       	mov	r24, r20
    20c0:	69 2f       	mov	r22, r25
    20c2:	a9 01       	movw	r20, r18
    20c4:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Key Pressed */
				{
					/* Debouncing */
					_delay_ms(20);
					/* Wait for Pin Goes High */
					while(Local_u8PinValue == DIO_u8_LOW){
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	88 23       	and	r24, r24
    20cc:	39 f3       	breq	.-50     	; 0x209c <KPD_u8GetKey+0x178>
						DIO_u8GetPinValue(KPD_Au8ColPorts[Local_u8ColCounter],KPD_Au8ColPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					/* Return Key Value */
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
    20ce:	89 89       	ldd	r24, Y+17	; 0x11
    20d0:	48 2f       	mov	r20, r24
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	88 89       	ldd	r24, Y+16	; 0x10
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	ca 01       	movw	r24, r20
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	82 0f       	add	r24, r18
    20e6:	93 1f       	adc	r25, r19
    20e8:	fc 01       	movw	r30, r24
    20ea:	ea 5c       	subi	r30, 0xCA	; 202
    20ec:	fe 4f       	sbci	r31, 0xFE	; 254
    20ee:	80 81       	ld	r24, Z
    20f0:	ec 89       	ldd	r30, Y+20	; 0x14
    20f2:	fd 89       	ldd	r31, Y+21	; 0x15
    20f4:	80 83       	st	Z, r24
					/* Terminate Cols Loop */
					Local_u8Flag = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <KPD_u8GetKey+0x1e6>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each row then Check The Columns */
		for(Local_u8RowCounter = 0; Local_u8RowCounter < 4 ; Local_u8RowCounter++){
			/* Activate the ROW */
			DIO_u8SetPinValue(KPD_Au8RowPorts[Local_u8RowCounter],KPD_Au8RowPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter = 0 ; Local_u8ColCounter < 4 ; Local_u8ColCounter++)
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	88 8b       	std	Y+16, r24	; 0x10
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	08 f4       	brcc	.+2      	; 0x210a <KPD_u8GetKey+0x1e6>
    2108:	3c cf       	rjmp	.-392    	; 0x1f82 <KPD_u8GetKey+0x5e>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate The Row */
			DIO_u8SetPinValue(KPD_Au8RowPorts[Local_u8RowCounter],KPD_Au8RowPins[Local_u8RowCounter],DIO_u8_HIGH);
    210a:	89 89       	ldd	r24, Y+17	; 0x11
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	fc 01       	movw	r30, r24
    2112:	e6 5d       	subi	r30, 0xD6	; 214
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	20 81       	ld	r18, Z
    2118:	89 89       	ldd	r24, Y+17	; 0x11
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	fc 01       	movw	r30, r24
    2120:	ea 5d       	subi	r30, 0xDA	; 218
    2122:	fe 4f       	sbci	r31, 0xFE	; 254
    2124:	90 81       	ld	r25, Z
    2126:	82 2f       	mov	r24, r18
    2128:	69 2f       	mov	r22, r25
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
			if(Local_u8Flag != 0)
    2130:	8f 85       	ldd	r24, Y+15	; 0x0f
    2132:	88 23       	and	r24, r24
    2134:	49 f4       	brne	.+18     	; 0x2148 <KPD_u8GetKey+0x224>
	if(Copy_pu8ReturnedKey != NULL)
	{
		/* Apply KPD Algo */
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each row then Check The Columns */
		for(Local_u8RowCounter = 0; Local_u8RowCounter < 4 ; Local_u8RowCounter++){
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	8f 5f       	subi	r24, 0xFF	; 255
    213a:	89 8b       	std	Y+17, r24	; 0x11
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	84 30       	cpi	r24, 0x04	; 4
    2140:	08 f4       	brcc	.+2      	; 0x2144 <KPD_u8GetKey+0x220>
    2142:	0a cf       	rjmp	.-492    	; 0x1f58 <KPD_u8GetKey+0x34>
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <KPD_u8GetKey+0x224>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2146:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    2148:	8a 89       	ldd	r24, Y+18	; 0x12
}
    214a:	65 96       	adiw	r28, 0x15	; 21
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidInit(void)
{
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	c4 56       	subi	r28, 0x64	; 100
    216a:	d0 40       	sbci	r29, 0x00	; 0
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	fe 01       	movw	r30, r28
    2178:	ef 59       	subi	r30, 0x9F	; 159
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	ac e0       	ldi	r26, 0x0C	; 12
    2182:	b2 e4       	ldi	r27, 0x42	; 66
    2184:	80 83       	st	Z, r24
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	a2 83       	std	Z+2, r26	; 0x02
    218a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	8e 01       	movw	r16, r28
    218e:	03 5a       	subi	r16, 0xA3	; 163
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	fe 01       	movw	r30, r28
    2194:	ef 59       	subi	r30, 0x9F	; 159
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	f8 01       	movw	r30, r16
    21b2:	80 83       	st	Z, r24
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	a2 83       	std	Z+2, r26	; 0x02
    21b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ba:	fe 01       	movw	r30, r28
    21bc:	e3 5a       	subi	r30, 0xA3	; 163
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	44 f4       	brge	.+16     	; 0x21e8 <LCD_voidInit+0x8c>
		__ticks = 1;
    21d8:	fe 01       	movw	r30, r28
    21da:	e5 5a       	subi	r30, 0xA5	; 165
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
    21e6:	64 c0       	rjmp	.+200    	; 0x22b0 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    21e8:	fe 01       	movw	r30, r28
    21ea:	e3 5a       	subi	r30, 0xA3	; 163
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	0c f0       	brlt	.+2      	; 0x2208 <LCD_voidInit+0xac>
    2206:	43 c0       	rjmp	.+134    	; 0x228e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	fe 01       	movw	r30, r28
    220a:	ef 59       	subi	r30, 0x9F	; 159
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8e 01       	movw	r16, r28
    2228:	05 5a       	subi	r16, 0xA5	; 165
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	f8 01       	movw	r30, r16
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
    223e:	1f c0       	rjmp	.+62     	; 0x227e <LCD_voidInit+0x122>
    2240:	fe 01       	movw	r30, r28
    2242:	e7 5a       	subi	r30, 0xA7	; 167
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5a       	subi	r30, 0xA7	; 167
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_voidInit+0xfc>
    225c:	fe 01       	movw	r30, r28
    225e:	e7 5a       	subi	r30, 0xA7	; 167
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	91 83       	std	Z+1, r25	; 0x01
    2264:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	de 01       	movw	r26, r28
    2268:	a5 5a       	subi	r26, 0xA5	; 165
    226a:	bf 4f       	sbci	r27, 0xFF	; 255
    226c:	fe 01       	movw	r30, r28
    226e:	e5 5a       	subi	r30, 0xA5	; 165
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	11 96       	adiw	r26, 0x01	; 1
    227a:	9c 93       	st	X, r25
    227c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	fe 01       	movw	r30, r28
    2280:	e5 5a       	subi	r30, 0xA5	; 165
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	d1 f6       	brne	.-76     	; 0x2240 <LCD_voidInit+0xe4>
    228c:	27 c0       	rjmp	.+78     	; 0x22dc <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	8e 01       	movw	r16, r28
    2290:	05 5a       	subi	r16, 0xA5	; 165
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
    2294:	fe 01       	movw	r30, r28
    2296:	e3 5a       	subi	r30, 0xA3	; 163
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
    22b0:	de 01       	movw	r26, r28
    22b2:	a9 5a       	subi	r26, 0xA9	; 169
    22b4:	bf 4f       	sbci	r27, 0xFF	; 255
    22b6:	fe 01       	movw	r30, r28
    22b8:	e5 5a       	subi	r30, 0xA5	; 165
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	8d 93       	st	X+, r24
    22c2:	9c 93       	st	X, r25
    22c4:	fe 01       	movw	r30, r28
    22c6:	e9 5a       	subi	r30, 0xA9	; 169
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_voidInit+0x172>
    22d2:	fe 01       	movw	r30, r28
    22d4:	e9 5a       	subi	r30, 0xA9	; 169
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
#if (LCD_u8_MODE == LCD_u8_8_BIT_MODE)
	/* Function Set Command */
	LCD_voidWriteCmnd(0b00111000);
#elif (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/* Rs = 0 (Command Byte) */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	63 e0       	ldi	r22, 0x03	; 3
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Rw = 0 (write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Send 4 Bits Seq. */
	PRIVATE_voidSetHalfPort(0b00100000);
    22f0:	80 e2       	ldi	r24, 0x20	; 32
    22f2:	0e 94 3c 19 	call	0x3278	; 0x3278 <PRIVATE_voidSetHalfPort>
	/* Enable Pulse */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    2300:	fe 01       	movw	r30, r28
    2302:	ed 5a       	subi	r30, 0xAD	; 173
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	80 83       	st	Z, r24
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	a2 83       	std	Z+2, r26	; 0x02
    2314:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2316:	8e 01       	movw	r16, r28
    2318:	01 5b       	subi	r16, 0xB1	; 177
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	fe 01       	movw	r30, r28
    231e:	ed 5a       	subi	r30, 0xAD	; 173
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	2b ea       	ldi	r18, 0xAB	; 171
    232c:	3a ea       	ldi	r19, 0xAA	; 170
    232e:	4a e2       	ldi	r20, 0x2A	; 42
    2330:	50 e4       	ldi	r21, 0x40	; 64
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	f8 01       	movw	r30, r16
    233c:	80 83       	st	Z, r24
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	a2 83       	std	Z+2, r26	; 0x02
    2342:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2344:	fe 01       	movw	r30, r28
    2346:	e1 5b       	subi	r30, 0xB1	; 177
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235e:	88 23       	and	r24, r24
    2360:	34 f4       	brge	.+12     	; 0x236e <LCD_voidInit+0x212>
		__ticks = 1;
    2362:	fe 01       	movw	r30, r28
    2364:	e2 5b       	subi	r30, 0xB2	; 178
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	80 83       	st	Z, r24
    236c:	e0 c0       	rjmp	.+448    	; 0x252e <LCD_voidInit+0x3d2>
	else if (__tmp > 255)
    236e:	fe 01       	movw	r30, r28
    2370:	e1 5b       	subi	r30, 0xB1	; 177
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	53 e4       	ldi	r21, 0x43	; 67
    2384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	0c f0       	brlt	.+2      	; 0x238e <LCD_voidInit+0x232>
    238c:	c0 c0       	rjmp	.+384    	; 0x250e <LCD_voidInit+0x3b2>
	{
		_delay_ms(__us / 1000.0);
    238e:	fe 01       	movw	r30, r28
    2390:	ed 5a       	subi	r30, 0xAD	; 173
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	fe 01       	movw	r30, r28
    23ae:	e6 5b       	subi	r30, 0xB6	; 182
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	a2 83       	std	Z+2, r26	; 0x02
    23b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	8e 01       	movw	r16, r28
    23bc:	0a 5b       	subi	r16, 0xBA	; 186
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e6 5b       	subi	r30, 0xB6	; 182
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a ef       	ldi	r20, 0xFA	; 250
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	f8 01       	movw	r30, r16
    23e0:	80 83       	st	Z, r24
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	a2 83       	std	Z+2, r26	; 0x02
    23e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e8:	fe 01       	movw	r30, r28
    23ea:	ea 5b       	subi	r30, 0xBA	; 186
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	44 f4       	brge	.+16     	; 0x2416 <LCD_voidInit+0x2ba>
		__ticks = 1;
    2406:	fe 01       	movw	r30, r28
    2408:	ec 5b       	subi	r30, 0xBC	; 188
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	64 c0       	rjmp	.+200    	; 0x24de <LCD_voidInit+0x382>
	else if (__tmp > 65535)
    2416:	fe 01       	movw	r30, r28
    2418:	ea 5b       	subi	r30, 0xBA	; 186
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	0c f0       	brlt	.+2      	; 0x2436 <LCD_voidInit+0x2da>
    2434:	43 c0       	rjmp	.+134    	; 0x24bc <LCD_voidInit+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	fe 01       	movw	r30, r28
    2438:	e6 5b       	subi	r30, 0xB6	; 182
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8e 01       	movw	r16, r28
    2456:	0c 5b       	subi	r16, 0xBC	; 188
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <LCD_voidInit+0x350>
    246e:	fe 01       	movw	r30, r28
    2470:	ee 5b       	subi	r30, 0xBE	; 190
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	fe 01       	movw	r30, r28
    247e:	ee 5b       	subi	r30, 0xBE	; 190
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_voidInit+0x32a>
    248a:	fe 01       	movw	r30, r28
    248c:	ee 5b       	subi	r30, 0xBE	; 190
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	de 01       	movw	r26, r28
    2496:	ac 5b       	subi	r26, 0xBC	; 188
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	ec 5b       	subi	r30, 0xBC	; 188
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	9c 93       	st	X, r25
    24aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	fe 01       	movw	r30, r28
    24ae:	ec 5b       	subi	r30, 0xBC	; 188
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	d1 f6       	brne	.-76     	; 0x246e <LCD_voidInit+0x312>
    24ba:	42 c0       	rjmp	.+132    	; 0x2540 <LCD_voidInit+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	8e 01       	movw	r16, r28
    24be:	0c 5b       	subi	r16, 0xBC	; 188
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	ea 5b       	subi	r30, 0xBA	; 186
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
    24de:	de 01       	movw	r26, r28
    24e0:	a0 5c       	subi	r26, 0xC0	; 192
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	ec 5b       	subi	r30, 0xBC	; 188
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	9c 93       	st	X, r25
    24f2:	8e 93       	st	-X, r24
    24f4:	fe 01       	movw	r30, r28
    24f6:	e0 5c       	subi	r30, 0xC0	; 192
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_voidInit+0x3a2>
    2502:	fe 01       	movw	r30, r28
    2504:	e0 5c       	subi	r30, 0xC0	; 192
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
    250c:	19 c0       	rjmp	.+50     	; 0x2540 <LCD_voidInit+0x3e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    250e:	8e 01       	movw	r16, r28
    2510:	02 5b       	subi	r16, 0xB2	; 178
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e1 5b       	subi	r30, 0xB1	; 177
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	80 83       	st	Z, r24
    252e:	fe 01       	movw	r30, r28
    2530:	e2 5b       	subi	r30, 0xB2	; 178
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2538:	8f ad       	ldd	r24, Y+63	; 0x3f
    253a:	8a 95       	dec	r24
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_voidInit+0x3de>
    253e:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	61 e0       	ldi	r22, 0x01	; 1
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Send Normal Command */
	LCD_voidWriteCmnd(0b00101000);
    254a:	88 e2       	ldi	r24, 0x28	; 40
    254c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e2       	ldi	r26, 0x20	; 32
    2556:	b2 e4       	ldi	r27, 0x42	; 66
    2558:	8b af       	std	Y+59, r24	; 0x3b
    255a:	9c af       	std	Y+60, r25	; 0x3c
    255c:	ad af       	std	Y+61, r26	; 0x3d
    255e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2560:	6b ad       	ldd	r22, Y+59	; 0x3b
    2562:	7c ad       	ldd	r23, Y+60	; 0x3c
    2564:	8d ad       	ldd	r24, Y+61	; 0x3d
    2566:	9e ad       	ldd	r25, Y+62	; 0x3e
    2568:	2b ea       	ldi	r18, 0xAB	; 171
    256a:	3a ea       	ldi	r19, 0xAA	; 170
    256c:	4a e2       	ldi	r20, 0x2A	; 42
    256e:	50 e4       	ldi	r21, 0x40	; 64
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8f ab       	std	Y+55, r24	; 0x37
    257a:	98 af       	std	Y+56, r25	; 0x38
    257c:	a9 af       	std	Y+57, r26	; 0x39
    257e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2580:	6f a9       	ldd	r22, Y+55	; 0x37
    2582:	78 ad       	ldd	r23, Y+56	; 0x38
    2584:	89 ad       	ldd	r24, Y+57	; 0x39
    2586:	9a ad       	ldd	r25, Y+58	; 0x3a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	1c f4       	brge	.+6      	; 0x259e <LCD_voidInit+0x442>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	8e ab       	std	Y+54, r24	; 0x36
    259c:	91 c0       	rjmp	.+290    	; 0x26c0 <LCD_voidInit+0x564>
	else if (__tmp > 255)
    259e:	6f a9       	ldd	r22, Y+55	; 0x37
    25a0:	78 ad       	ldd	r23, Y+56	; 0x38
    25a2:	89 ad       	ldd	r24, Y+57	; 0x39
    25a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	53 e4       	ldi	r21, 0x43	; 67
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <LCD_voidInit+0x45c>
    25b6:	7b c0       	rjmp	.+246    	; 0x26ae <LCD_voidInit+0x552>
	{
		_delay_ms(__us / 1000.0);
    25b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    25ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    25bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    25be:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8a ab       	std	Y+50, r24	; 0x32
    25d2:	9b ab       	std	Y+51, r25	; 0x33
    25d4:	ac ab       	std	Y+52, r26	; 0x34
    25d6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6a a9       	ldd	r22, Y+50	; 0x32
    25da:	7b a9       	ldd	r23, Y+51	; 0x33
    25dc:	8c a9       	ldd	r24, Y+52	; 0x34
    25de:	9d a9       	ldd	r25, Y+53	; 0x35
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a ef       	ldi	r20, 0xFA	; 250
    25e6:	54 e4       	ldi	r21, 0x44	; 68
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8e a7       	std	Y+46, r24	; 0x2e
    25f2:	9f a7       	std	Y+47, r25	; 0x2f
    25f4:	a8 ab       	std	Y+48, r26	; 0x30
    25f6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    25f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    25fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    25fc:	88 a9       	ldd	r24, Y+48	; 0x30
    25fe:	99 a9       	ldd	r25, Y+49	; 0x31
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <LCD_voidInit+0x4be>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9d a7       	std	Y+45, r25	; 0x2d
    2616:	8c a7       	std	Y+44, r24	; 0x2c
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <LCD_voidInit+0x53c>
	else if (__tmp > 65535)
    261a:	6e a5       	ldd	r22, Y+46	; 0x2e
    261c:	7f a5       	ldd	r23, Y+47	; 0x2f
    261e:	88 a9       	ldd	r24, Y+48	; 0x30
    2620:	99 a9       	ldd	r25, Y+49	; 0x31
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <LCD_voidInit+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6a a9       	ldd	r22, Y+50	; 0x32
    2634:	7b a9       	ldd	r23, Y+51	; 0x33
    2636:	8c a9       	ldd	r24, Y+52	; 0x34
    2638:	9d a9       	ldd	r25, Y+53	; 0x35
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9d a7       	std	Y+45, r25	; 0x2d
    2658:	8c a7       	std	Y+44, r24	; 0x2c
    265a:	0f c0       	rjmp	.+30     	; 0x267a <LCD_voidInit+0x51e>
    265c:	88 ec       	ldi	r24, 0xC8	; 200
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9b a7       	std	Y+43, r25	; 0x2b
    2662:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2664:	8a a5       	ldd	r24, Y+42	; 0x2a
    2666:	9b a5       	ldd	r25, Y+43	; 0x2b
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_voidInit+0x50c>
    266c:	9b a7       	std	Y+43, r25	; 0x2b
    266e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8c a5       	ldd	r24, Y+44	; 0x2c
    2672:	9d a5       	ldd	r25, Y+45	; 0x2d
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9d a7       	std	Y+45, r25	; 0x2d
    2678:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8c a5       	ldd	r24, Y+44	; 0x2c
    267c:	9d a5       	ldd	r25, Y+45	; 0x2d
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <LCD_voidInit+0x500>
    2682:	24 c0       	rjmp	.+72     	; 0x26cc <LCD_voidInit+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6e a5       	ldd	r22, Y+46	; 0x2e
    2686:	7f a5       	ldd	r23, Y+47	; 0x2f
    2688:	88 a9       	ldd	r24, Y+48	; 0x30
    268a:	99 a9       	ldd	r25, Y+49	; 0x31
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9d a7       	std	Y+45, r25	; 0x2d
    2696:	8c a7       	std	Y+44, r24	; 0x2c
    2698:	8c a5       	ldd	r24, Y+44	; 0x2c
    269a:	9d a5       	ldd	r25, Y+45	; 0x2d
    269c:	99 a7       	std	Y+41, r25	; 0x29
    269e:	88 a7       	std	Y+40, r24	; 0x28
    26a0:	88 a5       	ldd	r24, Y+40	; 0x28
    26a2:	99 a5       	ldd	r25, Y+41	; 0x29
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_voidInit+0x548>
    26a8:	99 a7       	std	Y+41, r25	; 0x29
    26aa:	88 a7       	std	Y+40, r24	; 0x28
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <LCD_voidInit+0x570>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ae:	6f a9       	ldd	r22, Y+55	; 0x37
    26b0:	78 ad       	ldd	r23, Y+56	; 0x38
    26b2:	89 ad       	ldd	r24, Y+57	; 0x39
    26b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8e ab       	std	Y+54, r24	; 0x36
    26c0:	8e a9       	ldd	r24, Y+54	; 0x36
    26c2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c4:	8f a1       	ldd	r24, Y+39	; 0x27
    26c6:	8a 95       	dec	r24
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_voidInit+0x56a>
    26ca:	8f a3       	std	Y+39, r24	; 0x27
#else
	#error"Wrong Choice"
#endif

	_delay_us(40);
	LCD_voidWriteCmnd(0b00001111);
    26cc:	8f e0       	ldi	r24, 0x0F	; 15
    26ce:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e2       	ldi	r26, 0x20	; 32
    26d8:	b2 e4       	ldi	r27, 0x42	; 66
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	2b ea       	ldi	r18, 0xAB	; 171
    26ec:	3a ea       	ldi	r19, 0xAA	; 170
    26ee:	4a e2       	ldi	r20, 0x2A	; 42
    26f0:	50 e4       	ldi	r21, 0x40	; 64
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	a9 a3       	std	Y+33, r26	; 0x21
    2700:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2702:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2704:	78 a1       	ldd	r23, Y+32	; 0x20
    2706:	89 a1       	ldd	r24, Y+33	; 0x21
    2708:	9a a1       	ldd	r25, Y+34	; 0x22
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	1c f4       	brge	.+6      	; 0x2720 <LCD_voidInit+0x5c4>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	8e 8f       	std	Y+30, r24	; 0x1e
    271e:	91 c0       	rjmp	.+290    	; 0x2842 <LCD_voidInit+0x6e6>
	else if (__tmp > 255)
    2720:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2722:	78 a1       	ldd	r23, Y+32	; 0x20
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	53 e4       	ldi	r21, 0x43	; 67
    2730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <LCD_voidInit+0x5de>
    2738:	7b c0       	rjmp	.+246    	; 0x2830 <LCD_voidInit+0x6d4>
	{
		_delay_ms(__us / 1000.0);
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8a 8f       	std	Y+26, r24	; 0x1a
    2754:	9b 8f       	std	Y+27, r25	; 0x1b
    2756:	ac 8f       	std	Y+28, r26	; 0x1c
    2758:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    275c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    275e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2760:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8e 8b       	std	Y+22, r24	; 0x16
    2774:	9f 8b       	std	Y+23, r25	; 0x17
    2776:	a8 8f       	std	Y+24, r26	; 0x18
    2778:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    277a:	6e 89       	ldd	r22, Y+22	; 0x16
    277c:	7f 89       	ldd	r23, Y+23	; 0x17
    277e:	88 8d       	ldd	r24, Y+24	; 0x18
    2780:	99 8d       	ldd	r25, Y+25	; 0x19
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <LCD_voidInit+0x640>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9d 8b       	std	Y+21, r25	; 0x15
    2798:	8c 8b       	std	Y+20, r24	; 0x14
    279a:	3f c0       	rjmp	.+126    	; 0x281a <LCD_voidInit+0x6be>
	else if (__tmp > 65535)
    279c:	6e 89       	ldd	r22, Y+22	; 0x16
    279e:	7f 89       	ldd	r23, Y+23	; 0x17
    27a0:	88 8d       	ldd	r24, Y+24	; 0x18
    27a2:	99 8d       	ldd	r25, Y+25	; 0x19
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <LCD_voidInit+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27b6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9d 8b       	std	Y+21, r25	; 0x15
    27da:	8c 8b       	std	Y+20, r24	; 0x14
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <LCD_voidInit+0x6a0>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9b 8b       	std	Y+19, r25	; 0x13
    27e4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27e6:	8a 89       	ldd	r24, Y+18	; 0x12
    27e8:	9b 89       	ldd	r25, Y+19	; 0x13
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_voidInit+0x68e>
    27ee:	9b 8b       	std	Y+19, r25	; 0x13
    27f0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8c 89       	ldd	r24, Y+20	; 0x14
    27f4:	9d 89       	ldd	r25, Y+21	; 0x15
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9d 8b       	std	Y+21, r25	; 0x15
    27fa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8c 89       	ldd	r24, Y+20	; 0x14
    27fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <LCD_voidInit+0x682>
    2804:	24 c0       	rjmp	.+72     	; 0x284e <LCD_voidInit+0x6f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	6e 89       	ldd	r22, Y+22	; 0x16
    2808:	7f 89       	ldd	r23, Y+23	; 0x17
    280a:	88 8d       	ldd	r24, Y+24	; 0x18
    280c:	99 8d       	ldd	r25, Y+25	; 0x19
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9d 8b       	std	Y+21, r25	; 0x15
    2818:	8c 8b       	std	Y+20, r24	; 0x14
    281a:	8c 89       	ldd	r24, Y+20	; 0x14
    281c:	9d 89       	ldd	r25, Y+21	; 0x15
    281e:	99 8b       	std	Y+17, r25	; 0x11
    2820:	88 8b       	std	Y+16, r24	; 0x10
    2822:	88 89       	ldd	r24, Y+16	; 0x10
    2824:	99 89       	ldd	r25, Y+17	; 0x11
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_voidInit+0x6ca>
    282a:	99 8b       	std	Y+17, r25	; 0x11
    282c:	88 8b       	std	Y+16, r24	; 0x10
    282e:	0f c0       	rjmp	.+30     	; 0x284e <LCD_voidInit+0x6f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2830:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2832:	78 a1       	ldd	r23, Y+32	; 0x20
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8e 8f       	std	Y+30, r24	; 0x1e
    2842:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2844:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2846:	8f 85       	ldd	r24, Y+15	; 0x0f
    2848:	8a 95       	dec	r24
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_voidInit+0x6ec>
    284c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidWriteCmnd(0x01);
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	b0 e4       	ldi	r27, 0x40	; 64
    285c:	8b 87       	std	Y+11, r24	; 0x0b
    285e:	9c 87       	std	Y+12, r25	; 0x0c
    2860:	ad 87       	std	Y+13, r26	; 0x0d
    2862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	6b 85       	ldd	r22, Y+11	; 0x0b
    2866:	7c 85       	ldd	r23, Y+12	; 0x0c
    2868:	8d 85       	ldd	r24, Y+13	; 0x0d
    286a:	9e 85       	ldd	r25, Y+14	; 0x0e
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a ef       	ldi	r20, 0xFA	; 250
    2872:	54 e4       	ldi	r21, 0x44	; 68
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8f 83       	std	Y+7, r24	; 0x07
    287e:	98 87       	std	Y+8, r25	; 0x08
    2880:	a9 87       	std	Y+9, r26	; 0x09
    2882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	2c f4       	brge	.+10     	; 0x28a6 <LCD_voidInit+0x74a>
		__ticks = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
    28a4:	3f c0       	rjmp	.+126    	; 0x2924 <LCD_voidInit+0x7c8>
	else if (__tmp > 65535)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	4c f5       	brge	.+82     	; 0x2910 <LCD_voidInit+0x7b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <LCD_voidInit+0x7aa>
    28e8:	88 ec       	ldi	r24, 0xC8	; 200
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	9c 81       	ldd	r25, Y+4	; 0x04
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_voidInit+0x798>
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	69 f7       	brne	.-38     	; 0x28e8 <LCD_voidInit+0x78c>
    290e:	14 c0       	rjmp	.+40     	; 0x2938 <LCD_voidInit+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_voidInit+0x7d4>
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCmnd(0b00000110);
    2938:	86 e0       	ldi	r24, 0x06	; 6
    293a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
}
    293e:	cc 59       	subi	r28, 0x9C	; 156
    2940:	df 4f       	sbci	r29, 0xFF	; 255
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

00002956 <LCD_voidWriteChar>:


void LCD_voidWriteChar(u8 Copy_u8Char)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	e1 97       	sbiw	r28, 0x31	; 49
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 (Data Byte) */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	63 e0       	ldi	r22, 0x03	; 3
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Rw = 0 (write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
#elif (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/* Send Most Nibbles to LCD */
	PRIVATE_voidSetHalfPort(Copy_u8Char);
    2980:	89 a9       	ldd	r24, Y+49	; 0x31
    2982:	0e 94 3c 19 	call	0x3278	; 0x3278 <PRIVATE_voidSetHalfPort>
	/* Enable Pulse */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e8       	ldi	r26, 0x80	; 128
    2996:	bf e3       	ldi	r27, 0x3F	; 63
    2998:	8d a7       	std	Y+45, r24	; 0x2d
    299a:	9e a7       	std	Y+46, r25	; 0x2e
    299c:	af a7       	std	Y+47, r26	; 0x2f
    299e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	2b ea       	ldi	r18, 0xAB	; 171
    29aa:	3a ea       	ldi	r19, 0xAA	; 170
    29ac:	4a e2       	ldi	r20, 0x2A	; 42
    29ae:	50 e4       	ldi	r21, 0x40	; 64
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	89 a7       	std	Y+41, r24	; 0x29
    29ba:	9a a7       	std	Y+42, r25	; 0x2a
    29bc:	ab a7       	std	Y+43, r26	; 0x2b
    29be:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29c0:	69 a5       	ldd	r22, Y+41	; 0x29
    29c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    29c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	1c f4       	brge	.+6      	; 0x29de <LCD_voidWriteChar+0x88>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	88 a7       	std	Y+40, r24	; 0x28
    29dc:	91 c0       	rjmp	.+290    	; 0x2b00 <LCD_voidWriteChar+0x1aa>
	else if (__tmp > 255)
    29de:	69 a5       	ldd	r22, Y+41	; 0x29
    29e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    29e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	53 e4       	ldi	r21, 0x43	; 67
    29ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	0c f0       	brlt	.+2      	; 0x29f8 <LCD_voidWriteChar+0xa2>
    29f6:	7b c0       	rjmp	.+246    	; 0x2aee <LCD_voidWriteChar+0x198>
	{
		_delay_ms(__us / 1000.0);
    29f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    29fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    29fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a e7       	ldi	r20, 0x7A	; 122
    2a06:	54 e4       	ldi	r21, 0x44	; 68
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8c a3       	std	Y+36, r24	; 0x24
    2a12:	9d a3       	std	Y+37, r25	; 0x25
    2a14:	ae a3       	std	Y+38, r26	; 0x26
    2a16:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a18:	6c a1       	ldd	r22, Y+36	; 0x24
    2a1a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a1c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a1e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	4a ef       	ldi	r20, 0xFA	; 250
    2a26:	54 e4       	ldi	r21, 0x44	; 68
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	88 a3       	std	Y+32, r24	; 0x20
    2a32:	99 a3       	std	Y+33, r25	; 0x21
    2a34:	aa a3       	std	Y+34, r26	; 0x22
    2a36:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a38:	68 a1       	ldd	r22, Y+32	; 0x20
    2a3a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a3c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a3e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_voidWriteChar+0x104>
		__ticks = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9f 8f       	std	Y+31, r25	; 0x1f
    2a56:	8e 8f       	std	Y+30, r24	; 0x1e
    2a58:	3f c0       	rjmp	.+126    	; 0x2ad8 <LCD_voidWriteChar+0x182>
	else if (__tmp > 65535)
    2a5a:	68 a1       	ldd	r22, Y+32	; 0x20
    2a5c:	79 a1       	ldd	r23, Y+33	; 0x21
    2a5e:	8a a1       	ldd	r24, Y+34	; 0x22
    2a60:	9b a1       	ldd	r25, Y+35	; 0x23
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	4c f5       	brge	.+82     	; 0x2ac4 <LCD_voidWriteChar+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	6c a1       	ldd	r22, Y+36	; 0x24
    2a74:	7d a1       	ldd	r23, Y+37	; 0x25
    2a76:	8e a1       	ldd	r24, Y+38	; 0x26
    2a78:	9f a1       	ldd	r25, Y+39	; 0x27
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e2       	ldi	r20, 0x20	; 32
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9f 8f       	std	Y+31, r25	; 0x1f
    2a98:	8e 8f       	std	Y+30, r24	; 0x1e
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <LCD_voidWriteChar+0x164>
    2a9c:	88 ec       	ldi	r24, 0xC8	; 200
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9d 8f       	std	Y+29, r25	; 0x1d
    2aa2:	8c 8f       	std	Y+28, r24	; 0x1c
    2aa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aa6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_voidWriteChar+0x152>
    2aac:	9d 8f       	std	Y+29, r25	; 0x1d
    2aae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ab8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2abc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	69 f7       	brne	.-38     	; 0x2a9c <LCD_voidWriteChar+0x146>
    2ac2:	24 c0       	rjmp	.+72     	; 0x2b0c <LCD_voidWriteChar+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ac6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ac8:	8a a1       	ldd	r24, Y+34	; 0x22
    2aca:	9b a1       	ldd	r25, Y+35	; 0x23
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ad6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ad8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ada:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2adc:	9b 8f       	std	Y+27, r25	; 0x1b
    2ade:	8a 8f       	std	Y+26, r24	; 0x1a
    2ae0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ae2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_voidWriteChar+0x18e>
    2ae8:	9b 8f       	std	Y+27, r25	; 0x1b
    2aea:	8a 8f       	std	Y+26, r24	; 0x1a
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <LCD_voidWriteChar+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aee:	69 a5       	ldd	r22, Y+41	; 0x29
    2af0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	88 a7       	std	Y+40, r24	; 0x28
    2b00:	88 a5       	ldd	r24, Y+40	; 0x28
    2b02:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b04:	89 8d       	ldd	r24, Y+25	; 0x19
    2b06:	8a 95       	dec	r24
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_voidWriteChar+0x1b0>
    2b0a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	61 e0       	ldi	r22, 0x01	; 1
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Send Least 4 bits to LCD */
	PRIVATE_voidSetHalfPort(Copy_u8Char<<4);
    2b16:	89 a9       	ldd	r24, Y+49	; 0x31
    2b18:	82 95       	swap	r24
    2b1a:	80 7f       	andi	r24, 0xF0	; 240
    2b1c:	0e 94 3c 19 	call	0x3278	; 0x3278 <PRIVATE_voidSetHalfPort>
	/* Enable Pulse */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e8       	ldi	r26, 0x80	; 128
    2b30:	bf e3       	ldi	r27, 0x3F	; 63
    2b32:	8d 8b       	std	Y+21, r24	; 0x15
    2b34:	9e 8b       	std	Y+22, r25	; 0x16
    2b36:	af 8b       	std	Y+23, r26	; 0x17
    2b38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b40:	98 8d       	ldd	r25, Y+24	; 0x18
    2b42:	2b ea       	ldi	r18, 0xAB	; 171
    2b44:	3a ea       	ldi	r19, 0xAA	; 170
    2b46:	4a e2       	ldi	r20, 0x2A	; 42
    2b48:	50 e4       	ldi	r21, 0x40	; 64
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	89 8b       	std	Y+17, r24	; 0x11
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	ab 8b       	std	Y+19, r26	; 0x13
    2b58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b5a:	69 89       	ldd	r22, Y+17	; 0x11
    2b5c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b60:	9c 89       	ldd	r25, Y+20	; 0x14
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	1c f4       	brge	.+6      	; 0x2b78 <LCD_voidWriteChar+0x222>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	88 8b       	std	Y+16, r24	; 0x10
    2b76:	91 c0       	rjmp	.+290    	; 0x2c9a <LCD_voidWriteChar+0x344>
	else if (__tmp > 255)
    2b78:	69 89       	ldd	r22, Y+17	; 0x11
    2b7a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	53 e4       	ldi	r21, 0x43	; 67
    2b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <LCD_voidWriteChar+0x23c>
    2b90:	7b c0       	rjmp	.+246    	; 0x2c88 <LCD_voidWriteChar+0x332>
	{
		_delay_ms(__us / 1000.0);
    2b92:	6d 89       	ldd	r22, Y+21	; 0x15
    2b94:	7e 89       	ldd	r23, Y+22	; 0x16
    2b96:	8f 89       	ldd	r24, Y+23	; 0x17
    2b98:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ba0:	54 e4       	ldi	r21, 0x44	; 68
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8c 87       	std	Y+12, r24	; 0x0c
    2bac:	9d 87       	std	Y+13, r25	; 0x0d
    2bae:	ae 87       	std	Y+14, r26	; 0x0e
    2bb0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4a ef       	ldi	r20, 0xFA	; 250
    2bc0:	54 e4       	ldi	r21, 0x44	; 68
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	88 87       	std	Y+8, r24	; 0x08
    2bcc:	99 87       	std	Y+9, r25	; 0x09
    2bce:	aa 87       	std	Y+10, r26	; 0x0a
    2bd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bd2:	68 85       	ldd	r22, Y+8	; 0x08
    2bd4:	79 85       	ldd	r23, Y+9	; 0x09
    2bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e8       	ldi	r20, 0x80	; 128
    2be0:	5f e3       	ldi	r21, 0x3F	; 63
    2be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	2c f4       	brge	.+10     	; 0x2bf4 <LCD_voidWriteChar+0x29e>
		__ticks = 1;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9f 83       	std	Y+7, r25	; 0x07
    2bf0:	8e 83       	std	Y+6, r24	; 0x06
    2bf2:	3f c0       	rjmp	.+126    	; 0x2c72 <LCD_voidWriteChar+0x31c>
	else if (__tmp > 65535)
    2bf4:	68 85       	ldd	r22, Y+8	; 0x08
    2bf6:	79 85       	ldd	r23, Y+9	; 0x09
    2bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	4c f5       	brge	.+82     	; 0x2c5e <LCD_voidWriteChar+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c12:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9f 83       	std	Y+7, r25	; 0x07
    2c32:	8e 83       	std	Y+6, r24	; 0x06
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <LCD_voidWriteChar+0x2fe>
    2c36:	88 ec       	ldi	r24, 0xC8	; 200
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9d 83       	std	Y+5, r25	; 0x05
    2c3c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c40:	9d 81       	ldd	r25, Y+5	; 0x05
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_voidWriteChar+0x2ec>
    2c46:	9d 83       	std	Y+5, r25	; 0x05
    2c48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9f 83       	std	Y+7, r25	; 0x07
    2c52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8e 81       	ldd	r24, Y+6	; 0x06
    2c56:	9f 81       	ldd	r25, Y+7	; 0x07
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <LCD_voidWriteChar+0x2e0>
    2c5c:	24 c0       	rjmp	.+72     	; 0x2ca6 <LCD_voidWriteChar+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	68 85       	ldd	r22, Y+8	; 0x08
    2c60:	79 85       	ldd	r23, Y+9	; 0x09
    2c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c64:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9f 83       	std	Y+7, r25	; 0x07
    2c70:	8e 83       	std	Y+6, r24	; 0x06
    2c72:	8e 81       	ldd	r24, Y+6	; 0x06
    2c74:	9f 81       	ldd	r25, Y+7	; 0x07
    2c76:	9b 83       	std	Y+3, r25	; 0x03
    2c78:	8a 83       	std	Y+2, r24	; 0x02
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <LCD_voidWriteChar+0x328>
    2c82:	9b 83       	std	Y+3, r25	; 0x03
    2c84:	8a 83       	std	Y+2, r24	; 0x02
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <LCD_voidWriteChar+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c88:	69 89       	ldd	r22, Y+17	; 0x11
    2c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	88 8b       	std	Y+16, r24	; 0x10
    2c9a:	88 89       	ldd	r24, Y+16	; 0x10
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	8a 95       	dec	r24
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_voidWriteChar+0x34a>
    2ca4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
#else
	#error "Wrong Choice"
#endif
}
    2cb0:	e1 96       	adiw	r28, 0x31	; 49
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <LCD_voidWriteCmnd>:
void LCD_voidWriteCmnd(u8 Copy_u8Cmnd)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	e1 97       	sbiw	r28, 0x31	; 49
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 (Command Byte) */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	63 e0       	ldi	r22, 0x03	; 3
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Rw = 0 (write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	62 e0       	ldi	r22, 0x02	; 2
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
#elif (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/* Send Most Nibbles to LCD */
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd);
    2cec:	89 a9       	ldd	r24, Y+49	; 0x31
    2cee:	0e 94 3c 19 	call	0x3278	; 0x3278 <PRIVATE_voidSetHalfPort>
	/* Enable Pulse */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	61 e0       	ldi	r22, 0x01	; 1
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e8       	ldi	r26, 0x80	; 128
    2d02:	bf e3       	ldi	r27, 0x3F	; 63
    2d04:	8d a7       	std	Y+45, r24	; 0x2d
    2d06:	9e a7       	std	Y+46, r25	; 0x2e
    2d08:	af a7       	std	Y+47, r26	; 0x2f
    2d0a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d0c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d0e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d12:	98 a9       	ldd	r25, Y+48	; 0x30
    2d14:	2b ea       	ldi	r18, 0xAB	; 171
    2d16:	3a ea       	ldi	r19, 0xAA	; 170
    2d18:	4a e2       	ldi	r20, 0x2A	; 42
    2d1a:	50 e4       	ldi	r21, 0x40	; 64
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	89 a7       	std	Y+41, r24	; 0x29
    2d26:	9a a7       	std	Y+42, r25	; 0x2a
    2d28:	ab a7       	std	Y+43, r26	; 0x2b
    2d2a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2d2c:	69 a5       	ldd	r22, Y+41	; 0x29
    2d2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	1c f4       	brge	.+6      	; 0x2d4a <LCD_voidWriteCmnd+0x88>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	88 a7       	std	Y+40, r24	; 0x28
    2d48:	91 c0       	rjmp	.+290    	; 0x2e6c <LCD_voidWriteCmnd+0x1aa>
	else if (__tmp > 255)
    2d4a:	69 a5       	ldd	r22, Y+41	; 0x29
    2d4c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	53 e4       	ldi	r21, 0x43	; 67
    2d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	0c f0       	brlt	.+2      	; 0x2d64 <LCD_voidWriteCmnd+0xa2>
    2d62:	7b c0       	rjmp	.+246    	; 0x2e5a <LCD_voidWriteCmnd+0x198>
	{
		_delay_ms(__us / 1000.0);
    2d64:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d66:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a e7       	ldi	r20, 0x7A	; 122
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8c a3       	std	Y+36, r24	; 0x24
    2d7e:	9d a3       	std	Y+37, r25	; 0x25
    2d80:	ae a3       	std	Y+38, r26	; 0x26
    2d82:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	6c a1       	ldd	r22, Y+36	; 0x24
    2d86:	7d a1       	ldd	r23, Y+37	; 0x25
    2d88:	8e a1       	ldd	r24, Y+38	; 0x26
    2d8a:	9f a1       	ldd	r25, Y+39	; 0x27
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a ef       	ldi	r20, 0xFA	; 250
    2d92:	54 e4       	ldi	r21, 0x44	; 68
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	88 a3       	std	Y+32, r24	; 0x20
    2d9e:	99 a3       	std	Y+33, r25	; 0x21
    2da0:	aa a3       	std	Y+34, r26	; 0x22
    2da2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2da4:	68 a1       	ldd	r22, Y+32	; 0x20
    2da6:	79 a1       	ldd	r23, Y+33	; 0x21
    2da8:	8a a1       	ldd	r24, Y+34	; 0x22
    2daa:	9b a1       	ldd	r25, Y+35	; 0x23
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <LCD_voidWriteCmnd+0x104>
		__ticks = 1;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9f 8f       	std	Y+31, r25	; 0x1f
    2dc2:	8e 8f       	std	Y+30, r24	; 0x1e
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <LCD_voidWriteCmnd+0x182>
	else if (__tmp > 65535)
    2dc6:	68 a1       	ldd	r22, Y+32	; 0x20
    2dc8:	79 a1       	ldd	r23, Y+33	; 0x21
    2dca:	8a a1       	ldd	r24, Y+34	; 0x22
    2dcc:	9b a1       	ldd	r25, Y+35	; 0x23
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	4f e7       	ldi	r20, 0x7F	; 127
    2dd4:	57 e4       	ldi	r21, 0x47	; 71
    2dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	4c f5       	brge	.+82     	; 0x2e30 <LCD_voidWriteCmnd+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	6c a1       	ldd	r22, Y+36	; 0x24
    2de0:	7d a1       	ldd	r23, Y+37	; 0x25
    2de2:	8e a1       	ldd	r24, Y+38	; 0x26
    2de4:	9f a1       	ldd	r25, Y+39	; 0x27
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9f 8f       	std	Y+31, r25	; 0x1f
    2e04:	8e 8f       	std	Y+30, r24	; 0x1e
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <LCD_voidWriteCmnd+0x164>
    2e08:	88 ec       	ldi	r24, 0xC8	; 200
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	9d 8f       	std	Y+29, r25	; 0x1d
    2e0e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_voidWriteCmnd+0x152>
    2e18:	9d 8f       	std	Y+29, r25	; 0x1d
    2e1a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9f 8f       	std	Y+31, r25	; 0x1f
    2e24:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <LCD_voidWriteCmnd+0x146>
    2e2e:	24 c0       	rjmp	.+72     	; 0x2e78 <LCD_voidWriteCmnd+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	68 a1       	ldd	r22, Y+32	; 0x20
    2e32:	79 a1       	ldd	r23, Y+33	; 0x21
    2e34:	8a a1       	ldd	r24, Y+34	; 0x22
    2e36:	9b a1       	ldd	r25, Y+35	; 0x23
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9f 8f       	std	Y+31, r25	; 0x1f
    2e42:	8e 8f       	std	Y+30, r24	; 0x1e
    2e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e48:	9b 8f       	std	Y+27, r25	; 0x1b
    2e4a:	8a 8f       	std	Y+26, r24	; 0x1a
    2e4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_voidWriteCmnd+0x18e>
    2e54:	9b 8f       	std	Y+27, r25	; 0x1b
    2e56:	8a 8f       	std	Y+26, r24	; 0x1a
    2e58:	0f c0       	rjmp	.+30     	; 0x2e78 <LCD_voidWriteCmnd+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e5a:	69 a5       	ldd	r22, Y+41	; 0x29
    2e5c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e60:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	88 a7       	std	Y+40, r24	; 0x28
    2e6c:	88 a5       	ldd	r24, Y+40	; 0x28
    2e6e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e70:	89 8d       	ldd	r24, Y+25	; 0x19
    2e72:	8a 95       	dec	r24
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <LCD_voidWriteCmnd+0x1b0>
    2e76:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	/* Send Least 4 bits to LCD */
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd<<4);
    2e82:	89 a9       	ldd	r24, Y+49	; 0x31
    2e84:	82 95       	swap	r24
    2e86:	80 7f       	andi	r24, 0xF0	; 240
    2e88:	0e 94 3c 19 	call	0x3278	; 0x3278 <PRIVATE_voidSetHalfPort>
	/* Enable Pulse */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a0 e8       	ldi	r26, 0x80	; 128
    2e9c:	bf e3       	ldi	r27, 0x3F	; 63
    2e9e:	8d 8b       	std	Y+21, r24	; 0x15
    2ea0:	9e 8b       	std	Y+22, r25	; 0x16
    2ea2:	af 8b       	std	Y+23, r26	; 0x17
    2ea4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	2b ea       	ldi	r18, 0xAB	; 171
    2eb0:	3a ea       	ldi	r19, 0xAA	; 170
    2eb2:	4a e2       	ldi	r20, 0x2A	; 42
    2eb4:	50 e4       	ldi	r21, 0x40	; 64
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	89 8b       	std	Y+17, r24	; 0x11
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	ab 8b       	std	Y+19, r26	; 0x13
    2ec4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ec6:	69 89       	ldd	r22, Y+17	; 0x11
    2ec8:	7a 89       	ldd	r23, Y+18	; 0x12
    2eca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e8       	ldi	r20, 0x80	; 128
    2ed4:	5f e3       	ldi	r21, 0x3F	; 63
    2ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eda:	88 23       	and	r24, r24
    2edc:	1c f4       	brge	.+6      	; 0x2ee4 <LCD_voidWriteCmnd+0x222>
		__ticks = 1;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	88 8b       	std	Y+16, r24	; 0x10
    2ee2:	91 c0       	rjmp	.+290    	; 0x3006 <LCD_voidWriteCmnd+0x344>
	else if (__tmp > 255)
    2ee4:	69 89       	ldd	r22, Y+17	; 0x11
    2ee6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eea:	9c 89       	ldd	r25, Y+20	; 0x14
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	53 e4       	ldi	r21, 0x43	; 67
    2ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	0c f0       	brlt	.+2      	; 0x2efe <LCD_voidWriteCmnd+0x23c>
    2efc:	7b c0       	rjmp	.+246    	; 0x2ff4 <LCD_voidWriteCmnd+0x332>
	{
		_delay_ms(__us / 1000.0);
    2efe:	6d 89       	ldd	r22, Y+21	; 0x15
    2f00:	7e 89       	ldd	r23, Y+22	; 0x16
    2f02:	8f 89       	ldd	r24, Y+23	; 0x17
    2f04:	98 8d       	ldd	r25, Y+24	; 0x18
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	4a e7       	ldi	r20, 0x7A	; 122
    2f0c:	54 e4       	ldi	r21, 0x44	; 68
    2f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	8c 87       	std	Y+12, r24	; 0x0c
    2f18:	9d 87       	std	Y+13, r25	; 0x0d
    2f1a:	ae 87       	std	Y+14, r26	; 0x0e
    2f1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f20:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f22:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f24:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a ef       	ldi	r20, 0xFA	; 250
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	88 87       	std	Y+8, r24	; 0x08
    2f38:	99 87       	std	Y+9, r25	; 0x09
    2f3a:	aa 87       	std	Y+10, r26	; 0x0a
    2f3c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f3e:	68 85       	ldd	r22, Y+8	; 0x08
    2f40:	79 85       	ldd	r23, Y+9	; 0x09
    2f42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f44:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <LCD_voidWriteCmnd+0x29e>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	9f 83       	std	Y+7, r25	; 0x07
    2f5c:	8e 83       	std	Y+6, r24	; 0x06
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <LCD_voidWriteCmnd+0x31c>
	else if (__tmp > 65535)
    2f60:	68 85       	ldd	r22, Y+8	; 0x08
    2f62:	79 85       	ldd	r23, Y+9	; 0x09
    2f64:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f66:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <LCD_voidWriteCmnd+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9f 83       	std	Y+7, r25	; 0x07
    2f9e:	8e 83       	std	Y+6, r24	; 0x06
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <LCD_voidWriteCmnd+0x2fe>
    2fa2:	88 ec       	ldi	r24, 0xC8	; 200
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9d 83       	std	Y+5, r25	; 0x05
    2fa8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	9d 81       	ldd	r25, Y+5	; 0x05
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <LCD_voidWriteCmnd+0x2ec>
    2fb2:	9d 83       	std	Y+5, r25	; 0x05
    2fb4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9f 83       	std	Y+7, r25	; 0x07
    2fbe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <LCD_voidWriteCmnd+0x2e0>
    2fc8:	24 c0       	rjmp	.+72     	; 0x3012 <LCD_voidWriteCmnd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	68 85       	ldd	r22, Y+8	; 0x08
    2fcc:	79 85       	ldd	r23, Y+9	; 0x09
    2fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9f 83       	std	Y+7, r25	; 0x07
    2fdc:	8e 83       	std	Y+6, r24	; 0x06
    2fde:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe2:	9b 83       	std	Y+3, r25	; 0x03
    2fe4:	8a 83       	std	Y+2, r24	; 0x02
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_voidWriteCmnd+0x328>
    2fee:	9b 83       	std	Y+3, r25	; 0x03
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <LCD_voidWriteCmnd+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ff4:	69 89       	ldd	r22, Y+17	; 0x11
    2ff6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	88 8b       	std	Y+16, r24	; 0x10
    3006:	88 89       	ldd	r24, Y+16	; 0x10
    3008:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	8a 95       	dec	r24
    300e:	f1 f7       	brne	.-4      	; 0x300c <LCD_voidWriteCmnd+0x34a>
    3010:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	#else
	#error "Wrong Choice"
#endif
}
    301c:	e1 96       	adiw	r28, 0x31	; 49
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <LCD_voidPrintString>:

void LCD_voidPrintString (u8* Copy_pu8String)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	61 97       	sbiw	r28, 0x11	; 17
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	99 8b       	std	Y+17, r25	; 0x11
    3044:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8String=0;
    3046:	1f 86       	std	Y+15, r1	; 0x0f
    3048:	80 c0       	rjmp	.+256    	; 0x314a <LCD_voidPrintString+0x11c>
	while((Copy_pu8String[Local_u8String])>0)
	{
		// Write Character on LCD.
		LCD_voidWriteChar(Copy_pu8String[Local_u8String]);
    304a:	8f 85       	ldd	r24, Y+15	; 0x0f
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	88 89       	ldd	r24, Y+16	; 0x10
    3052:	99 89       	ldd	r25, Y+17	; 0x11
    3054:	fc 01       	movw	r30, r24
    3056:	e2 0f       	add	r30, r18
    3058:	f3 1f       	adc	r31, r19
    305a:	80 81       	ld	r24, Z
    305c:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_voidWriteChar>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b0 e4       	ldi	r27, 0x40	; 64
    3068:	8b 87       	std	Y+11, r24	; 0x0b
    306a:	9c 87       	std	Y+12, r25	; 0x0c
    306c:	ad 87       	std	Y+13, r26	; 0x0d
    306e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a ef       	ldi	r20, 0xFA	; 250
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8f 83       	std	Y+7, r24	; 0x07
    308a:	98 87       	std	Y+8, r25	; 0x08
    308c:	a9 87       	std	Y+9, r26	; 0x09
    308e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	2c f4       	brge	.+10     	; 0x30b2 <LCD_voidPrintString+0x84>
		__ticks = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
    30b0:	3f c0       	rjmp	.+126    	; 0x3130 <LCD_voidPrintString+0x102>
	else if (__tmp > 65535)
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	57 e4       	ldi	r21, 0x47	; 71
    30c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	4c f5       	brge	.+82     	; 0x311c <LCD_voidPrintString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    30cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <LCD_voidPrintString+0xe4>
    30f4:	88 ec       	ldi	r24, 0xC8	; 200
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9c 83       	std	Y+4, r25	; 0x04
    30fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <LCD_voidPrintString+0xd2>
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	69 f7       	brne	.-38     	; 0x30f4 <LCD_voidPrintString+0xc6>
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <LCD_voidPrintString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <LCD_voidPrintString+0x10e>
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
		// Delay to let the LCD show the character.
		_delay_ms(2);
		Local_u8String++ ;
    3144:	8f 85       	ldd	r24, Y+15	; 0x0f
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	8f 87       	std	Y+15, r24	; 0x0f
}

void LCD_voidPrintString (u8* Copy_pu8String)
{
	u8 Local_u8String=0;
	while((Copy_pu8String[Local_u8String])>0)
    314a:	8f 85       	ldd	r24, Y+15	; 0x0f
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	88 89       	ldd	r24, Y+16	; 0x10
    3152:	99 89       	ldd	r25, Y+17	; 0x11
    3154:	fc 01       	movw	r30, r24
    3156:	e2 0f       	add	r30, r18
    3158:	f3 1f       	adc	r31, r19
    315a:	80 81       	ld	r24, Z
    315c:	88 23       	and	r24, r24
    315e:	09 f0       	breq	.+2      	; 0x3162 <LCD_voidPrintString+0x134>
    3160:	74 cf       	rjmp	.-280    	; 0x304a <LCD_voidPrintString+0x1c>
		LCD_voidWriteChar(Copy_pu8String[Local_u8String]);
		// Delay to let the LCD show the character.
		_delay_ms(2);
		Local_u8String++ ;
	}
}
    3162:	61 96       	adiw	r28, 0x11	; 17
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <LCD_voidPrintNumber>:
void LCD_voidPrintNumber (u8 Copy_pu8Number)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	2e 97       	sbiw	r28, 0x0e	; 14
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	8e 87       	std	Y+14, r24	; 0x0e
	 int i, rem, len = 0, n;
    318a:	1c 82       	std	Y+4, r1	; 0x04
    318c:	1b 82       	std	Y+3, r1	; 0x03
	 char str[5];

	    n = Copy_pu8Number;
    318e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <LCD_voidPrintNumber+0x44>
	    while (n != 0)
	    {
	        len++;
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	9c 83       	std	Y+4, r25	; 0x04
    31a2:	8b 83       	std	Y+3, r24	; 0x03
	        n /= 10;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	2a e0       	ldi	r18, 0x0A	; 10
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	b9 01       	movw	r22, r18
    31ae:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__divmodhi4>
    31b2:	cb 01       	movw	r24, r22
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
{
	 int i, rem, len = 0, n;
	 char str[5];

	    n = Copy_pu8Number;
	    while (n != 0)
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <LCD_voidPrintNumber+0x26>
	    {
	        len++;
	        n /= 10;
	    }
	    for (i = 0; i < len; i++)
    31c0:	18 86       	std	Y+8, r1	; 0x08
    31c2:	1f 82       	std	Y+7, r1	; 0x07
    31c4:	2b c0       	rjmp	.+86     	; 0x321c <LCD_voidPrintNumber+0xa8>
	    {
	        rem = Copy_pu8Number% 10;
    31c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c8:	9a e0       	ldi	r25, 0x0A	; 10
    31ca:	69 2f       	mov	r22, r25
    31cc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__udivmodqi4>
    31d0:	89 2f       	mov	r24, r25
    31d2:	88 2f       	mov	r24, r24
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_pu8Number = Copy_pu8Number / 10;
    31da:	8e 85       	ldd	r24, Y+14	; 0x0e
    31dc:	9a e0       	ldi	r25, 0x0A	; 10
    31de:	69 2f       	mov	r22, r25
    31e0:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__udivmodqi4>
    31e4:	8e 87       	std	Y+14, r24	; 0x0e
	        str[len - (i + 1)] = rem + '0';
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	98 85       	ldd	r25, Y+8	; 0x08
    31ea:	9c 01       	movw	r18, r24
    31ec:	20 95       	com	r18
    31ee:	30 95       	com	r19
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	28 0f       	add	r18, r24
    31f6:	39 1f       	adc	r19, r25
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	48 2f       	mov	r20, r24
    31fc:	40 5d       	subi	r20, 0xD0	; 208
    31fe:	ce 01       	movw	r24, r28
    3200:	09 96       	adiw	r24, 0x09	; 9
    3202:	fc 01       	movw	r30, r24
    3204:	e2 0f       	add	r30, r18
    3206:	f3 1f       	adc	r31, r19
    3208:	40 83       	st	Z, r20
	        LCD_voidWriteChar(rem+'0');
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	80 5d       	subi	r24, 0xD0	; 208
    320e:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_voidWriteChar>
	    while (n != 0)
	    {
	        len++;
	        n /= 10;
	    }
	    for (i = 0; i < len; i++)
    3212:	8f 81       	ldd	r24, Y+7	; 0x07
    3214:	98 85       	ldd	r25, Y+8	; 0x08
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	98 87       	std	Y+8, r25	; 0x08
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	2f 81       	ldd	r18, Y+7	; 0x07
    321e:	38 85       	ldd	r19, Y+8	; 0x08
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	28 17       	cp	r18, r24
    3226:	39 07       	cpc	r19, r25
    3228:	74 f2       	brlt	.-100    	; 0x31c6 <LCD_voidPrintNumber+0x52>
	        Copy_pu8Number = Copy_pu8Number / 10;
	        str[len - (i + 1)] = rem + '0';
	        LCD_voidWriteChar(rem+'0');
	    }

}
    322a:	2e 96       	adiw	r28, 0x0e	; 14
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <LCD_u8GoToXY>:
void LCD_u8GoToXY (u8 copyu8_xpos,u8 copyu8_ypos)
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	00 d0       	rcall	.+0      	; 0x3242 <LCD_u8GoToXY+0x6>
    3242:	0f 92       	push	r0
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	8a 83       	std	Y+2, r24	; 0x02
    324a:	6b 83       	std	Y+3, r22	; 0x03
	u8 localu8_Address;
	if (copyu8_xpos==0)
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	88 23       	and	r24, r24
    3250:	19 f4       	brne	.+6      	; 0x3258 <LCD_u8GoToXY+0x1c>
		localu8_Address=copyu8_ypos;
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	89 83       	std	Y+1, r24	; 0x01
    3256:	06 c0       	rjmp	.+12     	; 0x3264 <LCD_u8GoToXY+0x28>
	else if (copyu8_xpos==1)
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	19 f4       	brne	.+6      	; 0x3264 <LCD_u8GoToXY+0x28>
		localu8_Address=copyu8_ypos+0x40;
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	80 5c       	subi	r24, 0xC0	; 192
    3262:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteCmnd(localu8_Address+128);
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	80 58       	subi	r24, 0x80	; 128
    3268:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <PRIVATE_voidSetHalfPort>:
void PRIVATE_voidSetHalfPort(u8 Copy_u8Value)
{
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	0f 92       	push	r0
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(Copy_u8Value,7))
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	88 23       	and	r24, r24
    3288:	34 f4       	brge	.+12     	; 0x3296 <PRIVATE_voidSetHalfPort+0x1e>
	{
		DIO_u8SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_HIGH);
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	67 e0       	ldi	r22, 0x07	; 7
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    3294:	05 c0       	rjmp	.+10     	; 0x32a0 <PRIVATE_voidSetHalfPort+0x28>
	}
	else
	{
		DIO_u8SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_LOW);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	67 e0       	ldi	r22, 0x07	; 7
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	}
	if (GET_BIT(Copy_u8Value,6))
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	82 95       	swap	r24
    32a4:	86 95       	lsr	r24
    32a6:	86 95       	lsr	r24
    32a8:	83 70       	andi	r24, 0x03	; 3
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	81 70       	andi	r24, 0x01	; 1
    32b0:	90 70       	andi	r25, 0x00	; 0
    32b2:	88 23       	and	r24, r24
    32b4:	31 f0       	breq	.+12     	; 0x32c2 <PRIVATE_voidSetHalfPort+0x4a>
	{
		DIO_u8SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_HIGH);
    32b6:	82 e0       	ldi	r24, 0x02	; 2
    32b8:	66 e0       	ldi	r22, 0x06	; 6
    32ba:	41 e0       	ldi	r20, 0x01	; 1
    32bc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <PRIVATE_voidSetHalfPort+0x54>
	}
	else
	{
		DIO_u8SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_LOW);
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	66 e0       	ldi	r22, 0x06	; 6
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	}
	if (GET_BIT(Copy_u8Value,5))
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	82 95       	swap	r24
    32d0:	86 95       	lsr	r24
    32d2:	87 70       	andi	r24, 0x07	; 7
    32d4:	88 2f       	mov	r24, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	81 70       	andi	r24, 0x01	; 1
    32da:	90 70       	andi	r25, 0x00	; 0
    32dc:	88 23       	and	r24, r24
    32de:	31 f0       	breq	.+12     	; 0x32ec <PRIVATE_voidSetHalfPort+0x74>
	{
		DIO_u8SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_HIGH);
    32e0:	82 e0       	ldi	r24, 0x02	; 2
    32e2:	65 e0       	ldi	r22, 0x05	; 5
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    32ea:	05 c0       	rjmp	.+10     	; 0x32f6 <PRIVATE_voidSetHalfPort+0x7e>
	}
	else
	{
		DIO_u8SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_LOW);
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	65 e0       	ldi	r22, 0x05	; 5
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	}
	if (GET_BIT(Copy_u8Value,4))
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	82 95       	swap	r24
    32fa:	8f 70       	andi	r24, 0x0F	; 15
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	81 70       	andi	r24, 0x01	; 1
    3302:	90 70       	andi	r25, 0x00	; 0
    3304:	88 23       	and	r24, r24
    3306:	31 f0       	breq	.+12     	; 0x3314 <PRIVATE_voidSetHalfPort+0x9c>
	{
		DIO_u8SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_HIGH);
    3308:	82 e0       	ldi	r24, 0x02	; 2
    330a:	64 e0       	ldi	r22, 0x04	; 4
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
    3312:	05 c0       	rjmp	.+10     	; 0x331e <PRIVATE_voidSetHalfPort+0xa6>
	}
	else
	{
		DIO_u8SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_LOW);
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	64 e0       	ldi	r22, 0x04	; 4
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
	}
}
    331e:	0f 90       	pop	r0
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <TIMER0_voidInit>:
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	/* Choose Fast PWM mode mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    332e:	a3 e5       	ldi	r26, 0x53	; 83
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e3 e5       	ldi	r30, 0x53	; 83
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	80 64       	ori	r24, 0x40	; 64
    333a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    333c:	a3 e5       	ldi	r26, 0x53	; 83
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e3 e5       	ldi	r30, 0x53	; 83
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	88 60       	ori	r24, 0x08	; 8
    3348:	8c 93       	st	X, r24
	/* Clear on compare ... Set on Top */
//	SET_BIT(TCCR0,5);
//	CLR_BIT(TCCR0,4);

	/* Prescalar: Division by 8 */
 	CLR_BIT(TCCR0,TCCR0_CS00);
    334a:	a3 e5       	ldi	r26, 0x53	; 83
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	e3 e5       	ldi	r30, 0x53	; 83
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	8e 7f       	andi	r24, 0xFE	; 254
    3356:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    3358:	a3 e5       	ldi	r26, 0x53	; 83
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e3 e5       	ldi	r30, 0x53	; 83
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	82 60       	ori	r24, 0x02	; 2
    3364:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3366:	a3 e5       	ldi	r26, 0x53	; 83
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e3 e5       	ldi	r30, 0x53	; 83
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	8b 7f       	andi	r24, 0xFB	; 251
    3372:	8c 93       	st	X, r24


}
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <TIMER0_voidDisconnectOC0Pin>:

void TIMER0_voidDisconnectOC0Pin(void)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,5);
    3382:	a3 e5       	ldi	r26, 0x53	; 83
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e3 e5       	ldi	r30, 0x53	; 83
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	8f 7d       	andi	r24, 0xDF	; 223
    338e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    3390:	a3 e5       	ldi	r26, 0x53	; 83
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e3 e5       	ldi	r30, 0x53	; 83
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	8f 7e       	andi	r24, 0xEF	; 239
    339c:	8c 93       	st	X, r24
}
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <TIMER0_voidSetFastPwmNonInverting>:

void TIMER0_voidSetFastPwmNonInverting()
{
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,5);
    33ac:	a3 e5       	ldi	r26, 0x53	; 83
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e3 e5       	ldi	r30, 0x53	; 83
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	80 62       	ori	r24, 0x20	; 32
    33b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    33ba:	a3 e5       	ldi	r26, 0x53	; 83
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e3 e5       	ldi	r30, 0x53	; 83
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	8f 7e       	andi	r24, 0xEF	; 239
    33c6:	8c 93       	st	X, r24
}
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62

	/* Choose Fast PWM & Top=ICR1 mode */
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    33d6:	af e4       	ldi	r26, 0x4F	; 79
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	ef e4       	ldi	r30, 0x4F	; 79
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	8e 7f       	andi	r24, 0xFE	; 254
    33e2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    33e4:	af e4       	ldi	r26, 0x4F	; 79
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	ef e4       	ldi	r30, 0x4F	; 79
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	82 60       	ori	r24, 0x02	; 2
    33f0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    33f2:	ae e4       	ldi	r26, 0x4E	; 78
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ee e4       	ldi	r30, 0x4E	; 78
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	80 61       	ori	r24, 0x10	; 16
    33fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13 );
    3400:	ae e4       	ldi	r26, 0x4E	; 78
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ee e4       	ldi	r30, 0x4E	; 78
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	88 60       	ori	r24, 0x08	; 8
    340c:	8c 93       	st	X, r24

	/* Set fast PWM non inverting mode */
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    340e:	af e4       	ldi	r26, 0x4F	; 79
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	ef e4       	ldi	r30, 0x4F	; 79
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    341c:	af e4       	ldi	r26, 0x4F	; 79
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	ef e4       	ldi	r30, 0x4F	; 79
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	8f 7b       	andi	r24, 0xBF	; 191
    3428:	8c 93       	st	X, r24


	/* Set prescalar divide by 8 */
 	CLR_BIT(TCCR1B,TCCR1B_CS10);
    342a:	ae e4       	ldi	r26, 0x4E	; 78
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	ee e4       	ldi	r30, 0x4E	; 78
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8e 7f       	andi	r24, 0xFE	; 254
    3436:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    3438:	ae e4       	ldi	r26, 0x4E	; 78
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	ee e4       	ldi	r30, 0x4E	; 78
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3446:	ae e4       	ldi	r26, 0x4E	; 78
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	ee e4       	ldi	r30, 0x4E	; 78
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8b 7f       	andi	r24, 0xFB	; 251
    3452:	8c 93       	st	X, r24

}
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <TIMER1_voidSetTimerValue+0x6>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    3468:	ec e4       	ldi	r30, 0x4C	; 76
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	80 83       	st	Z, r24
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <TIMER1_voidReadTimerValue>:

u16 TIMER1_voidReadTimerValue(void)
{
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    3486:	ec e4       	ldi	r30, 0x4C	; 76
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	0f 92       	push	r0
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    34a0:	ec e5       	ldi	r30, 0x5C	; 92
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	80 83       	st	Z, r24
}
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <TIMER1_voidSetChannelACompMatchValue>:

void TIMER1_voidSetChannelACompMatchValue(u16 Copy_u16Value)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <TIMER1_voidSetChannelACompMatchValue+0x6>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16Value;
    34be:	ea e4       	ldi	r30, 0x4A	; 74
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
}
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <TIMER1_voidSetICRTopValue>:

void TIMER1_voidSetICRTopValue(u16 Copy_u16Value)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <TIMER1_voidSetICRTopValue+0x6>
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01
	ICR1  =Copy_u16Value;
    34e2:	e6 e4       	ldi	r30, 0x46	; 70
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	91 83       	std	Z+1, r25	; 0x01
    34ec:	80 83       	st	Z, r24
}
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	08 95       	ret

000034f8 <TIMER0_u8SetCallBack>:


u8 TIMER0_u8SetCallBack(void(*copy_pvCallBackFunc)(void))
{
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <TIMER0_u8SetCallBack+0x6>
    34fe:	0f 92       	push	r0
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	9b 83       	std	Y+3, r25	; 0x03
    3506:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =STD_TYPES_OK;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pvCallBackFunc!=NULL)
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	9b 81       	ldd	r25, Y+3	; 0x03
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	39 f0       	breq	.+14     	; 0x3522 <TIMER0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = copy_pvCallBackFunc;
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	9b 81       	ldd	r25, Y+3	; 0x03
    3518:	90 93 53 01 	sts	0x0153, r25
    351c:	80 93 52 01 	sts	0x0152, r24
    3520:	01 c0       	rjmp	.+2      	; 0x3524 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    3522:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    3524:	89 81       	ldd	r24, Y+1	; 0x01
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    3532:	1f 92       	push	r1
    3534:	0f 92       	push	r0
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	0f 92       	push	r0
    353a:	11 24       	eor	r1, r1
    353c:	2f 93       	push	r18
    353e:	3f 93       	push	r19
    3540:	4f 93       	push	r20
    3542:	5f 93       	push	r21
    3544:	6f 93       	push	r22
    3546:	7f 93       	push	r23
    3548:	8f 93       	push	r24
    354a:	9f 93       	push	r25
    354c:	af 93       	push	r26
    354e:	bf 93       	push	r27
    3550:	ef 93       	push	r30
    3552:	ff 93       	push	r31
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
    355c:	80 91 52 01 	lds	r24, 0x0152
    3560:	90 91 53 01 	lds	r25, 0x0153
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	29 f0       	breq	.+10     	; 0x3572 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    3568:	e0 91 52 01 	lds	r30, 0x0152
    356c:	f0 91 53 01 	lds	r31, 0x0153
    3570:	09 95       	icall
	}
}
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	ff 91       	pop	r31
    3578:	ef 91       	pop	r30
    357a:	bf 91       	pop	r27
    357c:	af 91       	pop	r26
    357e:	9f 91       	pop	r25
    3580:	8f 91       	pop	r24
    3582:	7f 91       	pop	r23
    3584:	6f 91       	pop	r22
    3586:	5f 91       	pop	r21
    3588:	4f 91       	pop	r20
    358a:	3f 91       	pop	r19
    358c:	2f 91       	pop	r18
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti

00003598 <USART_voidInit>:

static void (*USART_pvReceiveCallBack)(void) = NULL;
static u8* USART_pu8ReceivedByte = NULL;

void USART_voidInit(void)
{
    3598:	df 93       	push	r29
    359a:	cf 93       	push	r28
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
	UCSRC =  0b10000110;
    35a0:	e0 e4       	ldi	r30, 0x40	; 64
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	86 e8       	ldi	r24, 0x86	; 134
    35a6:	80 83       	st	Z, r24
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    35a8:	aa e2       	ldi	r26, 0x2A	; 42
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	ea e2       	ldi	r30, 0x2A	; 42
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 77       	andi	r24, 0x7F	; 127
    35b4:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    35b6:	aa e2       	ldi	r26, 0x2A	; 42
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ea e2       	ldi	r30, 0x2A	; 42
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	8f 7b       	andi	r24, 0xBF	; 191
    35c2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    35c4:	aa e2       	ldi	r26, 0x2A	; 42
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ea e2       	ldi	r30, 0x2A	; 42
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	8f 7d       	andi	r24, 0xDF	; 223
    35d0:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    35d2:	aa e2       	ldi	r26, 0x2A	; 42
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ea e2       	ldi	r30, 0x2A	; 42
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	80 61       	ori	r24, 0x10	; 16
    35de:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    35e0:	aa e2       	ldi	r26, 0x2A	; 42
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	ea e2       	ldi	r30, 0x2A	; 42
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	88 60       	ori	r24, 0x08	; 8
    35ec:	8c 93       	st	X, r24
	UBRRL = 51;
    35ee:	e9 e2       	ldi	r30, 0x29	; 41
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	83 e3       	ldi	r24, 0x33	; 51
    35f4:	80 83       	st	Z, r24
}
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <USART_voidSend>:


void USART_voidSend(u8 Copy_u8Data)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	0f 92       	push	r0
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	01 c0       	rjmp	.+2      	; 0x360c <USART_voidSend+0x10>
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0)
		{
			asm("NOP");
    360a:	00 00       	nop
}


void USART_voidSend(u8 Copy_u8Data)
{
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0)
    360c:	eb e2       	ldi	r30, 0x2B	; 43
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	80 81       	ld	r24, Z
    3612:	82 95       	swap	r24
    3614:	86 95       	lsr	r24
    3616:	87 70       	andi	r24, 0x07	; 7
    3618:	88 2f       	mov	r24, r24
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	81 70       	andi	r24, 0x01	; 1
    361e:	90 70       	andi	r25, 0x00	; 0
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	99 f3       	breq	.-26     	; 0x360a <USART_voidSend+0xe>
		{
			asm("NOP");
		}
	UDR = Copy_u8Data;
    3624:	ec e2       	ldi	r30, 0x2C	; 44
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	80 83       	st	Z, r24
}
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <USART_SendString>:

void USART_SendString(u8* Copy_pu8Character)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	00 d0       	rcall	.+0      	; 0x363a <USART_SendString+0x6>
    363a:	0f 92       	push	r0
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	9b 83       	std	Y+3, r25	; 0x03
    3642:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0;
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	0e c0       	rjmp	.+28     	; 0x3664 <USART_SendString+0x30>
	while(Copy_pu8Character[counter]!='\0')
	{
		USART_voidSend(Copy_pu8Character[counter]);
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	fc 01       	movw	r30, r24
    3654:	e2 0f       	add	r30, r18
    3656:	f3 1f       	adc	r31, r19
    3658:	80 81       	ld	r24, Z
    365a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <USART_voidSend>
		counter++;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(u8* Copy_pu8Character)
{
	u8 counter = 0;
	while(Copy_pu8Character[counter]!='\0')
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	9b 81       	ldd	r25, Y+3	; 0x03
    366e:	fc 01       	movw	r30, r24
    3670:	e2 0f       	add	r30, r18
    3672:	f3 1f       	adc	r31, r19
    3674:	80 81       	ld	r24, Z
    3676:	88 23       	and	r24, r24
    3678:	39 f7       	brne	.-50     	; 0x3648 <USART_SendString+0x14>
	{
		USART_voidSend(Copy_pu8Character[counter]);
		counter++;
	}
	USART_voidSend('\0');
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <USART_voidSend>
}
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <USART_u8Receive>:

u8 USART_u8Receive(void)
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	0f 92       	push	r0
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	01 c0       	rjmp	.+2      	; 0x369a <USART_u8Receive+0xe>
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0)
	{
		asm("NOP");
    3698:	00 00       	nop
	USART_voidSend('\0');
}

u8 USART_u8Receive(void)
{
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0)
    369a:	eb e2       	ldi	r30, 0x2B	; 43
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	88 23       	and	r24, r24
    36a2:	d4 f7       	brge	.-12     	; 0x3698 <USART_u8Receive+0xc>
	{
		asm("NOP");
	}
	u8 result = UDR;
    36a4:	ec e2       	ldi	r30, 0x2C	; 44
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	89 83       	std	Y+1, r24	; 0x01
	return result;
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret

000036b6 <USART_u8ReceiveAsynch>:
void USART_u8ReceiveAsynch(void (*PtrFunc)(void),u8* Copy_pu8ReceievedData)
{
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <USART_u8ReceiveAsynch+0x6>
    36bc:	00 d0       	rcall	.+0      	; 0x36be <USART_u8ReceiveAsynch+0x8>
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	7c 83       	std	Y+4, r23	; 0x04
    36c8:	6b 83       	std	Y+3, r22	; 0x03
	/* Enable receive interrupt */
	SET_BIT(UCSRB,UCSRB_RXCIE);
    36ca:	aa e2       	ldi	r26, 0x2A	; 42
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	ea e2       	ldi	r30, 0x2A	; 42
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	80 68       	ori	r24, 0x80	; 128
    36d6:	8c 93       	st	X, r24
	/* Init global variables */
	USART_pu8ReceivedByte = Copy_pu8ReceievedData;
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	9c 81       	ldd	r25, Y+4	; 0x04
    36dc:	90 93 57 01 	sts	0x0157, r25
    36e0:	80 93 56 01 	sts	0x0156, r24
	/* Set call back */
	USART_pvReceiveCallBack = PtrFunc;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	90 93 55 01 	sts	0x0155, r25
    36ec:	80 93 54 01 	sts	0x0154, r24
}
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <__vector_13>:

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    36fe:	1f 92       	push	r1
    3700:	0f 92       	push	r0
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	0f 92       	push	r0
    3706:	11 24       	eor	r1, r1
    3708:	2f 93       	push	r18
    370a:	3f 93       	push	r19
    370c:	4f 93       	push	r20
    370e:	5f 93       	push	r21
    3710:	6f 93       	push	r22
    3712:	7f 93       	push	r23
    3714:	8f 93       	push	r24
    3716:	9f 93       	push	r25
    3718:	af 93       	push	r26
    371a:	bf 93       	push	r27
    371c:	ef 93       	push	r30
    371e:	ff 93       	push	r31
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
	*USART_pu8ReceivedByte = UDR;
    3728:	a0 91 56 01 	lds	r26, 0x0156
    372c:	b0 91 57 01 	lds	r27, 0x0157
    3730:	ec e2       	ldi	r30, 0x2C	; 44
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	8c 93       	st	X, r24
	if(USART_pvReceiveCallBack!=NULL)
    3738:	80 91 54 01 	lds	r24, 0x0154
    373c:	90 91 55 01 	lds	r25, 0x0155
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	29 f0       	breq	.+10     	; 0x374e <__vector_13+0x50>
	{
		USART_pvReceiveCallBack();
    3744:	e0 91 54 01 	lds	r30, 0x0154
    3748:	f0 91 55 01 	lds	r31, 0x0155
    374c:	09 95       	icall
	}
}
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	ff 91       	pop	r31
    3754:	ef 91       	pop	r30
    3756:	bf 91       	pop	r27
    3758:	af 91       	pop	r26
    375a:	9f 91       	pop	r25
    375c:	8f 91       	pop	r24
    375e:	7f 91       	pop	r23
    3760:	6f 91       	pop	r22
    3762:	5f 91       	pop	r21
    3764:	4f 91       	pop	r20
    3766:	3f 91       	pop	r19
    3768:	2f 91       	pop	r18
    376a:	0f 90       	pop	r0
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	0f 90       	pop	r0
    3770:	1f 90       	pop	r1
    3772:	18 95       	reti

00003774 <main>:
static u8 UserIDs[NUMBER_OF_USERS][5];
static u8 EnteredID[15] ;


void main(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	0f 92       	push	r0
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	u8 StartAddress = FIRST_USER_START_ADD;
    377e:	8a e0       	ldi	r24, 0x0A	; 10
    3780:	89 83       	std	Y+1, r24	; 0x01
	/* Enable GIE */
	SET_BIT(SREG,7);
    3782:	af e5       	ldi	r26, 0x5F	; 95
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	ef e5       	ldi	r30, 0x5F	; 95
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	80 68       	ori	r24, 0x80	; 128
    378e:	8c 93       	st	X, r24
	System_voidInit();
    3790:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <System_voidInit>
	EEPROM_voidReadUserIds(StartAddress);
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <EEPROM_voidReadUserIds>
	WelcomeScreen();
    379a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <WelcomeScreen>
	GetPassword();
    379e:	0e 94 c1 1c 	call	0x3982	; 0x3982 <GetPassword>
	CheckPassword();
    37a2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CheckPassword>

	while(1)
	{

		if (ControlLightFlag == 1)
    37a6:	80 91 58 01 	lds	r24, 0x0158
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <main+0x32>
		{
			ControlLight();
    37ae:	0e 94 89 1c 	call	0x3912	; 0x3912 <ControlLight>
    37b2:	f9 cf       	rjmp	.-14     	; 0x37a6 <main+0x32>

000037b4 <System_voidInit>:
		}
	}
}

void System_voidInit(void)
{
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
	DIO_u8INIT();
    37bc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <DIO_u8INIT>
	LCD_voidInit();
    37c0:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_voidInit>
	ADC_voidInit();
    37c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	I2C_voidInitMaster(0);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <I2C_voidInitMaster>
	TIMER0_voidInit();
    37ce:	0e 94 93 19 	call	0x3326	; 0x3326 <TIMER0_voidInit>
	TIMER1_voidInit();
    37d2:	0e 94 e7 19 	call	0x33ce	; 0x33ce <TIMER1_voidInit>
	TIMER1_voidSetICRTopValue(20000);
    37d6:	80 e2       	ldi	r24, 0x20	; 32
    37d8:	9e e4       	ldi	r25, 0x4E	; 78
    37da:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <TIMER1_voidSetICRTopValue>
	USART_voidInit();
    37de:	0e 94 cc 1a 	call	0x3598	; 0x3598 <USART_voidInit>
}
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <WelcomeScreen>:

void WelcomeScreen(void)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(0,0);
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
	LCD_voidPrintString("Welcome");
    37f8:	80 e6       	ldi	r24, 0x60	; 96
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
	LCD_u8GoToXY(1,0);
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
	LCD_voidPrintString("Enter ID:");
    3808:	88 e6       	ldi	r24, 0x68	; 104
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
}
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <USART_voidVoiceReceived>:

void USART_voidVoiceReceived(void)
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	if (USART_u8ReadByte == '\n')
    381e:	80 91 5b 01 	lds	r24, 0x015B
    3822:	8a 30       	cpi	r24, 0x0A	; 10
    3824:	69 f4       	brne	.+26     	; 0x3840 <USART_voidVoiceReceived+0x2a>
	{
		ReceivedVoice[counter] = '\0';
    3826:	80 91 59 01 	lds	r24, 0x0159
    382a:	88 2f       	mov	r24, r24
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	fc 01       	movw	r30, r24
    3830:	e4 5a       	subi	r30, 0xA4	; 164
    3832:	fe 4f       	sbci	r31, 0xFE	; 254
    3834:	10 82       	st	Z, r1
		counter = 0;
    3836:	10 92 59 01 	sts	0x0159, r1
		ControlHome();
    383a:	0e 94 32 1c 	call	0x3864	; 0x3864 <ControlHome>
    383e:	0f c0       	rjmp	.+30     	; 0x385e <USART_voidVoiceReceived+0x48>
	}
	else
	{
		ReceivedVoice[counter] = USART_u8ReadByte;
    3840:	80 91 59 01 	lds	r24, 0x0159
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	20 91 5b 01 	lds	r18, 0x015B
    384c:	fc 01       	movw	r30, r24
    384e:	e4 5a       	subi	r30, 0xA4	; 164
    3850:	fe 4f       	sbci	r31, 0xFE	; 254
    3852:	20 83       	st	Z, r18
		counter++;
    3854:	80 91 59 01 	lds	r24, 0x0159
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	80 93 59 01 	sts	0x0159, r24
	}
}
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	08 95       	ret

00003864 <ControlHome>:

void ControlHome(void)
{
    3864:	df 93       	push	r29
    3866:	cf 93       	push	r28
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
	if (!(strcmp(ReceivedVoice,"turn on light")))
    386c:	8c e5       	ldi	r24, 0x5C	; 92
    386e:	91 e0       	ldi	r25, 0x01	; 1
    3870:	22 e7       	ldi	r18, 0x72	; 114
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	b9 01       	movw	r22, r18
    3876:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    387a:	00 97       	sbiw	r24, 0x00	; 0
    387c:	51 f4       	brne	.+20     	; 0x3892 <ControlHome+0x2e>
	{
		TIMER0_voidDisconnectOC0Pin();
    387e:	0e 94 bd 19 	call	0x337a	; 0x337a <TIMER0_voidDisconnectOC0Pin>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	63 e0       	ldi	r22, 0x03	; 3
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
		ControlLightFlag = 0;
    388c:	10 92 58 01 	sts	0x0158, r1
    3890:	3d c0       	rjmp	.+122    	; 0x390c <ControlHome+0xa8>
	}
	else if (!(strcmp(ReceivedVoice,"turn off light")))
    3892:	8c e5       	ldi	r24, 0x5C	; 92
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	20 e8       	ldi	r18, 0x80	; 128
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	b9 01       	movw	r22, r18
    389c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	51 f4       	brne	.+20     	; 0x38b8 <ControlHome+0x54>
	{
		TIMER0_voidDisconnectOC0Pin();
    38a4:	0e 94 bd 19 	call	0x337a	; 0x337a <TIMER0_voidDisconnectOC0Pin>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	63 e0       	ldi	r22, 0x03	; 3
    38ac:	40 e0       	ldi	r20, 0x00	; 0
    38ae:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_u8SetPinValue>
		ControlLightFlag = 0;
    38b2:	10 92 58 01 	sts	0x0158, r1
    38b6:	2a c0       	rjmp	.+84     	; 0x390c <ControlHome+0xa8>
	}
	else if (!(strcmp(ReceivedVoice,"control light")))
    38b8:	8c e5       	ldi	r24, 0x5C	; 92
    38ba:	91 e0       	ldi	r25, 0x01	; 1
    38bc:	2f e8       	ldi	r18, 0x8F	; 143
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	b9 01       	movw	r22, r18
    38c2:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	31 f4       	brne	.+12     	; 0x38d6 <ControlHome+0x72>
	{
		ControlLightFlag = 1;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 93 58 01 	sts	0x0158, r24
		TIMER0_voidSetFastPwmNonInverting();
    38d0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <TIMER0_voidSetFastPwmNonInverting>
    38d4:	1b c0       	rjmp	.+54     	; 0x390c <ControlHome+0xa8>
	}
	else if(!(strcmp(ReceivedVoice,"open the door")))
    38d6:	8c e5       	ldi	r24, 0x5C	; 92
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	2d e9       	ldi	r18, 0x9D	; 157
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	b9 01       	movw	r22, r18
    38e0:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	29 f4       	brne	.+10     	; 0x38f2 <ControlHome+0x8e>
	{
		TIMER1_voidSetChannelACompMatchValue(750);
    38e8:	8e ee       	ldi	r24, 0xEE	; 238
    38ea:	92 e0       	ldi	r25, 0x02	; 2
    38ec:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <TIMER1_voidSetChannelACompMatchValue>
    38f0:	0d c0       	rjmp	.+26     	; 0x390c <ControlHome+0xa8>
	}
	else if(!(strcmp(ReceivedVoice,"close the door")))
    38f2:	8c e5       	ldi	r24, 0x5C	; 92
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	2b ea       	ldi	r18, 0xAB	; 171
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	b9 01       	movw	r22, r18
    38fc:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	21 f4       	brne	.+8      	; 0x390c <ControlHome+0xa8>
	{
		TIMER1_voidSetChannelACompMatchValue(2500);
    3904:	84 ec       	ldi	r24, 0xC4	; 196
    3906:	99 e0       	ldi	r25, 0x09	; 9
    3908:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <TIMER1_voidSetChannelACompMatchValue>
	}
}
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <ControlLight>:

void ControlLight(void)
{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	00 d0       	rcall	.+0      	; 0x3918 <ControlLight+0x6>
    3918:	00 d0       	rcall	.+0      	; 0x391a <ControlLight+0x8>
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16DigitalValue = 0;
    391e:	1c 82       	std	Y+4, r1	; 0x04
    3920:	1b 82       	std	Y+3, r1	; 0x03
	u16 Comp_u16MatchValue = 0;
    3922:	1a 82       	std	Y+2, r1	; 0x02
    3924:	19 82       	std	Y+1, r1	; 0x01
	ADC_u8GetDigitalValueSync(7,&Local_u16DigitalValue);
    3926:	9e 01       	movw	r18, r28
    3928:	2d 5f       	subi	r18, 0xFD	; 253
    392a:	3f 4f       	sbci	r19, 0xFF	; 255
    392c:	87 e0       	ldi	r24, 0x07	; 7
    392e:	b9 01       	movw	r22, r18
    3930:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSync>
	Comp_u16MatchValue = ((255*(1024-Local_u16DigitalValue))/1024)-255;
    3934:	2b 81       	ldd	r18, Y+3	; 0x03
    3936:	3c 81       	ldd	r19, Y+4	; 0x04
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	94 e0       	ldi	r25, 0x04	; 4
    393c:	ac 01       	movw	r20, r24
    393e:	42 1b       	sub	r20, r18
    3940:	53 0b       	sbc	r21, r19
    3942:	ca 01       	movw	r24, r20
    3944:	9c 01       	movw	r18, r24
    3946:	22 0f       	add	r18, r18
    3948:	33 1f       	adc	r19, r19
    394a:	c9 01       	movw	r24, r18
    394c:	96 95       	lsr	r25
    394e:	98 2f       	mov	r25, r24
    3950:	88 27       	eor	r24, r24
    3952:	97 95       	ror	r25
    3954:	87 95       	ror	r24
    3956:	82 1b       	sub	r24, r18
    3958:	93 0b       	sbc	r25, r19
    395a:	84 0f       	add	r24, r20
    395c:	95 1f       	adc	r25, r21
    395e:	89 2f       	mov	r24, r25
    3960:	99 27       	eor	r25, r25
    3962:	86 95       	lsr	r24
    3964:	86 95       	lsr	r24
    3966:	8f 5f       	subi	r24, 0xFF	; 255
    3968:	90 40       	sbci	r25, 0x00	; 0
    396a:	9a 83       	std	Y+2, r25	; 0x02
    396c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_voidSetCompMatchValue(Comp_u16MatchValue);
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	0e 94 4a 1a 	call	0x3494	; 0x3494 <TIMER0_voidSetCompMatchValue>
}
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	08 95       	ret

00003982 <GetPassword>:

void GetPassword(void)
{
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	00 d0       	rcall	.+0      	; 0x3988 <GetPassword+0x6>
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    398c:	19 82       	std	Y+1, r1	; 0x01
	u8 PressedKey = 'd';
    398e:	84 e6       	ldi	r24, 0x64	; 100
    3990:	8a 83       	std	Y+2, r24	; 0x02
	memset(EnteredID, '\0', sizeof(EnteredID)/sizeof(EnteredID[0]));
    3992:	84 e8       	ldi	r24, 0x84	; 132
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	4f e0       	ldi	r20, 0x0F	; 15
    399c:	50 e0       	ldi	r21, 0x00	; 0
    399e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <memset>
	while(1)
	{
		KPD_u8GetKey(&PressedKey);
    39a2:	ce 01       	movw	r24, r28
    39a4:	02 96       	adiw	r24, 0x02	; 2
    39a6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <KPD_u8GetKey>
		if(PressedKey != KPD_u8_KEY_NOT_PRESSED)
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	8f 3f       	cpi	r24, 0xFF	; 255
    39ae:	c9 f3       	breq	.-14     	; 0x39a2 <GetPassword+0x20>
		{
			if (PressedKey != '+')
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	8b 32       	cpi	r24, 0x2B	; 43
    39b4:	81 f0       	breq	.+32     	; 0x39d6 <GetPassword+0x54>
			{
				EnteredID[i] = PressedKey;
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	88 2f       	mov	r24, r24
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	2a 81       	ldd	r18, Y+2	; 0x02
    39be:	fc 01       	movw	r30, r24
    39c0:	ec 57       	subi	r30, 0x7C	; 124
    39c2:	fe 4f       	sbci	r31, 0xFE	; 254
    39c4:	20 83       	st	Z, r18
				LCD_voidWriteChar(PressedKey+'0');
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	80 5d       	subi	r24, 0xD0	; 208
    39ca:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_voidWriteChar>
				i++;
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	8f 5f       	subi	r24, 0xFF	; 255
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	e6 cf       	rjmp	.-52     	; 0x39a2 <GetPassword+0x20>

			}
			else
			{
				CheckPassword();
    39d6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <CheckPassword>
				break;
			}
		}
	}
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <CheckPassword>:
}

void CheckPassword(void)
{
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	ac 97       	sbiw	r28, 0x2c	; 44
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
	static u8 TryNumber = 0;
	u8 SuccessRegister = 0;
    39f8:	1c a6       	std	Y+44, r1	; 0x2c
	for (u8 i=0;i<3;i++)
    39fa:	1b a6       	std	Y+43, r1	; 0x2b
    39fc:	b4 c0       	rjmp	.+360    	; 0x3b66 <CheckPassword+0x182>
	{
		if(strcmp(EnteredID,UserIDs[i]))
    39fe:	45 e7       	ldi	r20, 0x75	; 117
    3a00:	51 e0       	ldi	r21, 0x01	; 1
    3a02:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a04:	28 2f       	mov	r18, r24
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	c9 01       	movw	r24, r18
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	82 0f       	add	r24, r18
    3a14:	93 1f       	adc	r25, r19
    3a16:	9a 01       	movw	r18, r20
    3a18:	28 0f       	add	r18, r24
    3a1a:	39 1f       	adc	r19, r25
    3a1c:	84 e8       	ldi	r24, 0x84	; 132
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	b9 01       	movw	r22, r18
    3a22:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <strcmp>
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	09 f0       	breq	.+2      	; 0x3a2c <CheckPassword+0x48>
    3a2a:	9a c0       	rjmp	.+308    	; 0x3b60 <CheckPassword+0x17c>
		{

		}
		else
		{
			LCD_voidWriteCmnd(0b00000001);
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
			LCD_u8GoToXY(0,0);
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
			LCD_voidPrintString("Sucess register");
    3a3a:	8a eb       	ldi	r24, 0xBA	; 186
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	aa ef       	ldi	r26, 0xFA	; 250
    3a48:	b4 e4       	ldi	r27, 0x44	; 68
    3a4a:	8f a3       	std	Y+39, r24	; 0x27
    3a4c:	98 a7       	std	Y+40, r25	; 0x28
    3a4e:	a9 a7       	std	Y+41, r26	; 0x29
    3a50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a52:	6f a1       	ldd	r22, Y+39	; 0x27
    3a54:	78 a5       	ldd	r23, Y+40	; 0x28
    3a56:	89 a5       	ldd	r24, Y+41	; 0x29
    3a58:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	4a ef       	ldi	r20, 0xFA	; 250
    3a60:	54 e4       	ldi	r21, 0x44	; 68
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	8b a3       	std	Y+35, r24	; 0x23
    3a6c:	9c a3       	std	Y+36, r25	; 0x24
    3a6e:	ad a3       	std	Y+37, r26	; 0x25
    3a70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a72:	6b a1       	ldd	r22, Y+35	; 0x23
    3a74:	7c a1       	ldd	r23, Y+36	; 0x24
    3a76:	8d a1       	ldd	r24, Y+37	; 0x25
    3a78:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e8       	ldi	r20, 0x80	; 128
    3a80:	5f e3       	ldi	r21, 0x3F	; 63
    3a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a86:	88 23       	and	r24, r24
    3a88:	2c f4       	brge	.+10     	; 0x3a94 <CheckPassword+0xb0>
		__ticks = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9a a3       	std	Y+34, r25	; 0x22
    3a90:	89 a3       	std	Y+33, r24	; 0x21
    3a92:	3f c0       	rjmp	.+126    	; 0x3b12 <CheckPassword+0x12e>
	else if (__tmp > 65535)
    3a94:	6b a1       	ldd	r22, Y+35	; 0x23
    3a96:	7c a1       	ldd	r23, Y+36	; 0x24
    3a98:	8d a1       	ldd	r24, Y+37	; 0x25
    3a9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	4c f5       	brge	.+82     	; 0x3afe <CheckPassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	6f a1       	ldd	r22, Y+39	; 0x27
    3aae:	78 a5       	ldd	r23, Y+40	; 0x28
    3ab0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9a a3       	std	Y+34, r25	; 0x22
    3ad2:	89 a3       	std	Y+33, r24	; 0x21
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <CheckPassword+0x110>
    3ad6:	88 ec       	ldi	r24, 0xC8	; 200
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	98 a3       	std	Y+32, r25	; 0x20
    3adc:	8f 8f       	std	Y+31, r24	; 0x1f
    3ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ae0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <CheckPassword+0xfe>
    3ae6:	98 a3       	std	Y+32, r25	; 0x20
    3ae8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	89 a1       	ldd	r24, Y+33	; 0x21
    3aec:	9a a1       	ldd	r25, Y+34	; 0x22
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9a a3       	std	Y+34, r25	; 0x22
    3af2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	89 a1       	ldd	r24, Y+33	; 0x21
    3af6:	9a a1       	ldd	r25, Y+34	; 0x22
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <CheckPassword+0xf2>
    3afc:	14 c0       	rjmp	.+40     	; 0x3b26 <CheckPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	6b a1       	ldd	r22, Y+35	; 0x23
    3b00:	7c a1       	ldd	r23, Y+36	; 0x24
    3b02:	8d a1       	ldd	r24, Y+37	; 0x25
    3b04:	9e a1       	ldd	r25, Y+38	; 0x26
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9a a3       	std	Y+34, r25	; 0x22
    3b10:	89 a3       	std	Y+33, r24	; 0x21
    3b12:	89 a1       	ldd	r24, Y+33	; 0x21
    3b14:	9a a1       	ldd	r25, Y+34	; 0x22
    3b16:	9e 8f       	std	Y+30, r25	; 0x1e
    3b18:	8d 8f       	std	Y+29, r24	; 0x1d
    3b1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <CheckPassword+0x13a>
    3b22:	9e 8f       	std	Y+30, r25	; 0x1e
    3b24:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			LCD_voidWriteCmnd(0b00000001);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
			LCD_u8GoToXY(0,0);
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
			LCD_voidPrintString("Wait for");
    3b34:	8a ec       	ldi	r24, 0xCA	; 202
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
			LCD_u8GoToXY(1,0);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	60 e0       	ldi	r22, 0x00	; 0
    3b40:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
			LCD_voidPrintString("voice commands...");
    3b44:	83 ed       	ldi	r24, 0xD3	; 211
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
			USART_u8ReceiveAsynch(USART_voidVoiceReceived,&USART_u8ReadByte);
    3b4c:	8b e0       	ldi	r24, 0x0B	; 11
    3b4e:	9c e1       	ldi	r25, 0x1C	; 28
    3b50:	2b e5       	ldi	r18, 0x5B	; 91
    3b52:	31 e0       	ldi	r19, 0x01	; 1
    3b54:	b9 01       	movw	r22, r18
    3b56:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <USART_u8ReceiveAsynch>
			SuccessRegister = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	8c a7       	std	Y+44, r24	; 0x2c
    3b5e:	07 c0       	rjmp	.+14     	; 0x3b6e <CheckPassword+0x18a>

void CheckPassword(void)
{
	static u8 TryNumber = 0;
	u8 SuccessRegister = 0;
	for (u8 i=0;i<3;i++)
    3b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b62:	8f 5f       	subi	r24, 0xFF	; 255
    3b64:	8b a7       	std	Y+43, r24	; 0x2b
    3b66:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b68:	83 30       	cpi	r24, 0x03	; 3
    3b6a:	08 f4       	brcc	.+2      	; 0x3b6e <CheckPassword+0x18a>
    3b6c:	48 cf       	rjmp	.-368    	; 0x39fe <CheckPassword+0x1a>
			USART_u8ReceiveAsynch(USART_voidVoiceReceived,&USART_u8ReadByte);
			SuccessRegister = 1;
			break;
		}
	}
	if (SuccessRegister == 0 && TryNumber<3)
    3b6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b70:	88 23       	and	r24, r24
    3b72:	09 f0       	breq	.+2      	; 0x3b76 <CheckPassword+0x192>
    3b74:	9d c0       	rjmp	.+314    	; 0x3cb0 <CheckPassword+0x2cc>
    3b76:	80 91 5a 01 	lds	r24, 0x015A
    3b7a:	83 30       	cpi	r24, 0x03	; 3
    3b7c:	08 f0       	brcs	.+2      	; 0x3b80 <CheckPassword+0x19c>
    3b7e:	98 c0       	rjmp	.+304    	; 0x3cb0 <CheckPassword+0x2cc>
	{
		TryNumber++;
    3b80:	80 91 5a 01 	lds	r24, 0x015A
    3b84:	8f 5f       	subi	r24, 0xFF	; 255
    3b86:	80 93 5a 01 	sts	0x015A, r24
		LCD_voidWriteCmnd(0b00000001);
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
		LCD_u8GoToXY(0,0);
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	60 e0       	ldi	r22, 0x00	; 0
    3b94:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("Wrong Password");
    3b98:	85 ee       	ldi	r24, 0xE5	; 229
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
		LCD_u8GoToXY(1,0);
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	60 e0       	ldi	r22, 0x00	; 0
    3ba4:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("Try Again...");
    3ba8:	84 ef       	ldi	r24, 0xF4	; 244
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e8       	ldi	r25, 0x80	; 128
    3bb4:	ab eb       	ldi	r26, 0xBB	; 187
    3bb6:	b4 e4       	ldi	r27, 0x44	; 68
    3bb8:	89 8f       	std	Y+25, r24	; 0x19
    3bba:	9a 8f       	std	Y+26, r25	; 0x1a
    3bbc:	ab 8f       	std	Y+27, r26	; 0x1b
    3bbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    3bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4a ef       	ldi	r20, 0xFA	; 250
    3bce:	54 e4       	ldi	r21, 0x44	; 68
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	8d 8b       	std	Y+21, r24	; 0x15
    3bda:	9e 8b       	std	Y+22, r25	; 0x16
    3bdc:	af 8b       	std	Y+23, r26	; 0x17
    3bde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3be0:	6d 89       	ldd	r22, Y+21	; 0x15
    3be2:	7e 89       	ldd	r23, Y+22	; 0x16
    3be4:	8f 89       	ldd	r24, Y+23	; 0x17
    3be6:	98 8d       	ldd	r25, Y+24	; 0x18
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e8       	ldi	r20, 0x80	; 128
    3bee:	5f e3       	ldi	r21, 0x3F	; 63
    3bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf4:	88 23       	and	r24, r24
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <CheckPassword+0x21e>
		__ticks = 1;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	9c 8b       	std	Y+20, r25	; 0x14
    3bfe:	8b 8b       	std	Y+19, r24	; 0x13
    3c00:	3f c0       	rjmp	.+126    	; 0x3c80 <CheckPassword+0x29c>
	else if (__tmp > 65535)
    3c02:	6d 89       	ldd	r22, Y+21	; 0x15
    3c04:	7e 89       	ldd	r23, Y+22	; 0x16
    3c06:	8f 89       	ldd	r24, Y+23	; 0x17
    3c08:	98 8d       	ldd	r25, Y+24	; 0x18
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	3f ef       	ldi	r19, 0xFF	; 255
    3c0e:	4f e7       	ldi	r20, 0x7F	; 127
    3c10:	57 e4       	ldi	r21, 0x47	; 71
    3c12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c16:	18 16       	cp	r1, r24
    3c18:	4c f5       	brge	.+82     	; 0x3c6c <CheckPassword+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1a:	69 8d       	ldd	r22, Y+25	; 0x19
    3c1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e2       	ldi	r20, 0x20	; 32
    3c28:	51 e4       	ldi	r21, 0x41	; 65
    3c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	9c 8b       	std	Y+20, r25	; 0x14
    3c40:	8b 8b       	std	Y+19, r24	; 0x13
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <CheckPassword+0x27e>
    3c44:	88 ec       	ldi	r24, 0xC8	; 200
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9a 8b       	std	Y+18, r25	; 0x12
    3c4a:	89 8b       	std	Y+17, r24	; 0x11
    3c4c:	89 89       	ldd	r24, Y+17	; 0x11
    3c4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <CheckPassword+0x26c>
    3c54:	9a 8b       	std	Y+18, r25	; 0x12
    3c56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c58:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	9c 8b       	std	Y+20, r25	; 0x14
    3c60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c62:	8b 89       	ldd	r24, Y+19	; 0x13
    3c64:	9c 89       	ldd	r25, Y+20	; 0x14
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	69 f7       	brne	.-38     	; 0x3c44 <CheckPassword+0x260>
    3c6a:	14 c0       	rjmp	.+40     	; 0x3c94 <CheckPassword+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c70:	8f 89       	ldd	r24, Y+23	; 0x17
    3c72:	98 8d       	ldd	r25, Y+24	; 0x18
    3c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9c 8b       	std	Y+20, r25	; 0x14
    3c7e:	8b 8b       	std	Y+19, r24	; 0x13
    3c80:	8b 89       	ldd	r24, Y+19	; 0x13
    3c82:	9c 89       	ldd	r25, Y+20	; 0x14
    3c84:	98 8b       	std	Y+16, r25	; 0x10
    3c86:	8f 87       	std	Y+15, r24	; 0x0f
    3c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c8a:	98 89       	ldd	r25, Y+16	; 0x10
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <CheckPassword+0x2a8>
    3c90:	98 8b       	std	Y+16, r25	; 0x10
    3c92:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		LCD_voidWriteCmnd(0b00000001);
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
		LCD_u8GoToXY(0,0);
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("Enter ID:");
    3ca2:	88 e6       	ldi	r24, 0x68	; 104
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
		GetPassword();
    3caa:	0e 94 c1 1c 	call	0x3982	; 0x3982 <GetPassword>
    3cae:	9d c0       	rjmp	.+314    	; 0x3dea <CheckPassword+0x406>

	}
	else if (SuccessRegister == 0 && TryNumber>=3)
    3cb0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cb2:	88 23       	and	r24, r24
    3cb4:	09 f0       	breq	.+2      	; 0x3cb8 <CheckPassword+0x2d4>
    3cb6:	99 c0       	rjmp	.+306    	; 0x3dea <CheckPassword+0x406>
    3cb8:	80 91 5a 01 	lds	r24, 0x015A
    3cbc:	83 30       	cpi	r24, 0x03	; 3
    3cbe:	08 f4       	brcc	.+2      	; 0x3cc2 <CheckPassword+0x2de>
    3cc0:	94 c0       	rjmp	.+296    	; 0x3dea <CheckPassword+0x406>
	{
		TryNumber = 0;
    3cc2:	10 92 5a 01 	sts	0x015A, r1
		LCD_voidWriteCmnd(0b00000001);
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
		LCD_u8GoToXY(0,0);
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("Try again");
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	91 e0       	ldi	r25, 0x01	; 1
    3cd8:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
		LCD_u8GoToXY(1,0);
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("after 5 seconds...");
    3ce4:	8b e0       	ldi	r24, 0x0B	; 11
    3ce6:	91 e0       	ldi	r25, 0x01	; 1
    3ce8:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e4       	ldi	r25, 0x40	; 64
    3cf0:	ac e9       	ldi	r26, 0x9C	; 156
    3cf2:	b5 e4       	ldi	r27, 0x45	; 69
    3cf4:	8b 87       	std	Y+11, r24	; 0x0b
    3cf6:	9c 87       	std	Y+12, r25	; 0x0c
    3cf8:	ad 87       	std	Y+13, r26	; 0x0d
    3cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	4a ef       	ldi	r20, 0xFA	; 250
    3d0a:	54 e4       	ldi	r21, 0x44	; 68
    3d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	8f 83       	std	Y+7, r24	; 0x07
    3d16:	98 87       	std	Y+8, r25	; 0x08
    3d18:	a9 87       	std	Y+9, r26	; 0x09
    3d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1e:	78 85       	ldd	r23, Y+8	; 0x08
    3d20:	89 85       	ldd	r24, Y+9	; 0x09
    3d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e8       	ldi	r20, 0x80	; 128
    3d2a:	5f e3       	ldi	r21, 0x3F	; 63
    3d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d30:	88 23       	and	r24, r24
    3d32:	2c f4       	brge	.+10     	; 0x3d3e <CheckPassword+0x35a>
		__ticks = 1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	9e 83       	std	Y+6, r25	; 0x06
    3d3a:	8d 83       	std	Y+5, r24	; 0x05
    3d3c:	3f c0       	rjmp	.+126    	; 0x3dbc <CheckPassword+0x3d8>
	else if (__tmp > 65535)
    3d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d40:	78 85       	ldd	r23, Y+8	; 0x08
    3d42:	89 85       	ldd	r24, Y+9	; 0x09
    3d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	3f ef       	ldi	r19, 0xFF	; 255
    3d4a:	4f e7       	ldi	r20, 0x7F	; 127
    3d4c:	57 e4       	ldi	r21, 0x47	; 71
    3d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d52:	18 16       	cp	r1, r24
    3d54:	4c f5       	brge	.+82     	; 0x3da8 <CheckPassword+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	51 e4       	ldi	r21, 0x41	; 65
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	bc 01       	movw	r22, r24
    3d70:	cd 01       	movw	r24, r26
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	9e 83       	std	Y+6, r25	; 0x06
    3d7c:	8d 83       	std	Y+5, r24	; 0x05
    3d7e:	0f c0       	rjmp	.+30     	; 0x3d9e <CheckPassword+0x3ba>
    3d80:	88 ec       	ldi	r24, 0xC8	; 200
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	9c 83       	std	Y+4, r25	; 0x04
    3d86:	8b 83       	std	Y+3, r24	; 0x03
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <CheckPassword+0x3a8>
    3d90:	9c 83       	std	Y+4, r25	; 0x04
    3d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3da0:	9e 81       	ldd	r25, Y+6	; 0x06
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	69 f7       	brne	.-38     	; 0x3d80 <CheckPassword+0x39c>
    3da6:	14 c0       	rjmp	.+40     	; 0x3dd0 <CheckPassword+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da8:	6f 81       	ldd	r22, Y+7	; 0x07
    3daa:	78 85       	ldd	r23, Y+8	; 0x08
    3dac:	89 85       	ldd	r24, Y+9	; 0x09
    3dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	9a 83       	std	Y+2, r25	; 0x02
    3dc2:	89 83       	std	Y+1, r24	; 0x01
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f1 f7       	brne	.-4      	; 0x3dc8 <CheckPassword+0x3e4>
    3dcc:	9a 83       	std	Y+2, r25	; 0x02
    3dce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		LCD_voidWriteCmnd(0b00000001);
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_voidWriteCmnd>
		LCD_u8GoToXY(0,0);
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_u8GoToXY>
		LCD_voidPrintString("Enter ID:");
    3dde:	88 e6       	ldi	r24, 0x68	; 104
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_voidPrintString>
		GetPassword();
    3de6:	0e 94 c1 1c 	call	0x3982	; 0x3982 <GetPassword>


	}
}
    3dea:	ac 96       	adiw	r28, 0x2c	; 44
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <EEPROM_voidReadUserIds>:

void EEPROM_voidReadUserIds(u8 StartAddress)
{
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <EEPROM_voidReadUserIds+0x6>
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	8b 83       	std	Y+3, r24	; 0x03

	for(u8 x = 0;x<3;x++)
    3e0a:	1a 82       	std	Y+2, r1	; 0x02
    3e0c:	28 c0       	rjmp	.+80     	; 0x3e5e <EEPROM_voidReadUserIds+0x62>
	{
		for(u8 y=0;y<4;y++)
    3e0e:	19 82       	std	Y+1, r1	; 0x01
    3e10:	20 c0       	rjmp	.+64     	; 0x3e52 <EEPROM_voidReadUserIds+0x56>
		{
			EEPROM_ReadByte(&UserIDs[x][y],StartAddress++);
    3e12:	45 e7       	ldi	r20, 0x75	; 117
    3e14:	51 e0       	ldi	r21, 0x01	; 1
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	c9 01       	movw	r24, r18
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	28 0f       	add	r18, r24
    3e28:	39 1f       	adc	r19, r25
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	82 0f       	add	r24, r18
    3e32:	93 1f       	adc	r25, r19
    3e34:	48 0f       	add	r20, r24
    3e36:	59 1f       	adc	r21, r25
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	8b 83       	std	Y+3, r24	; 0x03
    3e44:	ca 01       	movw	r24, r20
    3e46:	b9 01       	movw	r22, r18
    3e48:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <EEPROM_ReadByte>
void EEPROM_voidReadUserIds(u8 StartAddress)
{

	for(u8 x = 0;x<3;x++)
	{
		for(u8 y=0;y<4;y++)
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	8f 5f       	subi	r24, 0xFF	; 255
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	84 30       	cpi	r24, 0x04	; 4
    3e56:	e8 f2       	brcs	.-70     	; 0x3e12 <EEPROM_voidReadUserIds+0x16>
}

void EEPROM_voidReadUserIds(u8 StartAddress)
{

	for(u8 x = 0;x<3;x++)
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5a:	8f 5f       	subi	r24, 0xFF	; 255
    3e5c:	8a 83       	std	Y+2, r24	; 0x02
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	83 30       	cpi	r24, 0x03	; 3
    3e62:	a8 f2       	brcs	.-86     	; 0x3e0e <EEPROM_voidReadUserIds+0x12>
		for(u8 y=0;y<4;y++)
		{
			EEPROM_ReadByte(&UserIDs[x][y],StartAddress++);
		}
	}
}
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <__udivmodqi4>:
    3e70:	99 1b       	sub	r25, r25
    3e72:	79 e0       	ldi	r23, 0x09	; 9
    3e74:	04 c0       	rjmp	.+8      	; 0x3e7e <__udivmodqi4_ep>

00003e76 <__udivmodqi4_loop>:
    3e76:	99 1f       	adc	r25, r25
    3e78:	96 17       	cp	r25, r22
    3e7a:	08 f0       	brcs	.+2      	; 0x3e7e <__udivmodqi4_ep>
    3e7c:	96 1b       	sub	r25, r22

00003e7e <__udivmodqi4_ep>:
    3e7e:	88 1f       	adc	r24, r24
    3e80:	7a 95       	dec	r23
    3e82:	c9 f7       	brne	.-14     	; 0x3e76 <__udivmodqi4_loop>
    3e84:	80 95       	com	r24
    3e86:	08 95       	ret

00003e88 <__divmodhi4>:
    3e88:	97 fb       	bst	r25, 7
    3e8a:	09 2e       	mov	r0, r25
    3e8c:	07 26       	eor	r0, r23
    3e8e:	0a d0       	rcall	.+20     	; 0x3ea4 <__divmodhi4_neg1>
    3e90:	77 fd       	sbrc	r23, 7
    3e92:	04 d0       	rcall	.+8      	; 0x3e9c <__divmodhi4_neg2>
    3e94:	0c d0       	rcall	.+24     	; 0x3eae <__udivmodhi4>
    3e96:	06 d0       	rcall	.+12     	; 0x3ea4 <__divmodhi4_neg1>
    3e98:	00 20       	and	r0, r0
    3e9a:	1a f4       	brpl	.+6      	; 0x3ea2 <__divmodhi4_exit>

00003e9c <__divmodhi4_neg2>:
    3e9c:	70 95       	com	r23
    3e9e:	61 95       	neg	r22
    3ea0:	7f 4f       	sbci	r23, 0xFF	; 255

00003ea2 <__divmodhi4_exit>:
    3ea2:	08 95       	ret

00003ea4 <__divmodhi4_neg1>:
    3ea4:	f6 f7       	brtc	.-4      	; 0x3ea2 <__divmodhi4_exit>
    3ea6:	90 95       	com	r25
    3ea8:	81 95       	neg	r24
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	08 95       	ret

00003eae <__udivmodhi4>:
    3eae:	aa 1b       	sub	r26, r26
    3eb0:	bb 1b       	sub	r27, r27
    3eb2:	51 e1       	ldi	r21, 0x11	; 17
    3eb4:	07 c0       	rjmp	.+14     	; 0x3ec4 <__udivmodhi4_ep>

00003eb6 <__udivmodhi4_loop>:
    3eb6:	aa 1f       	adc	r26, r26
    3eb8:	bb 1f       	adc	r27, r27
    3eba:	a6 17       	cp	r26, r22
    3ebc:	b7 07       	cpc	r27, r23
    3ebe:	10 f0       	brcs	.+4      	; 0x3ec4 <__udivmodhi4_ep>
    3ec0:	a6 1b       	sub	r26, r22
    3ec2:	b7 0b       	sbc	r27, r23

00003ec4 <__udivmodhi4_ep>:
    3ec4:	88 1f       	adc	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	5a 95       	dec	r21
    3eca:	a9 f7       	brne	.-22     	; 0x3eb6 <__udivmodhi4_loop>
    3ecc:	80 95       	com	r24
    3ece:	90 95       	com	r25
    3ed0:	bc 01       	movw	r22, r24
    3ed2:	cd 01       	movw	r24, r26
    3ed4:	08 95       	ret

00003ed6 <__prologue_saves__>:
    3ed6:	2f 92       	push	r2
    3ed8:	3f 92       	push	r3
    3eda:	4f 92       	push	r4
    3edc:	5f 92       	push	r5
    3ede:	6f 92       	push	r6
    3ee0:	7f 92       	push	r7
    3ee2:	8f 92       	push	r8
    3ee4:	9f 92       	push	r9
    3ee6:	af 92       	push	r10
    3ee8:	bf 92       	push	r11
    3eea:	cf 92       	push	r12
    3eec:	df 92       	push	r13
    3eee:	ef 92       	push	r14
    3ef0:	ff 92       	push	r15
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	ca 1b       	sub	r28, r26
    3f00:	db 0b       	sbc	r29, r27
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	09 94       	ijmp

00003f0e <__epilogue_restores__>:
    3f0e:	2a 88       	ldd	r2, Y+18	; 0x12
    3f10:	39 88       	ldd	r3, Y+17	; 0x11
    3f12:	48 88       	ldd	r4, Y+16	; 0x10
    3f14:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f16:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f18:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f20:	b9 84       	ldd	r11, Y+9	; 0x09
    3f22:	c8 84       	ldd	r12, Y+8	; 0x08
    3f24:	df 80       	ldd	r13, Y+7	; 0x07
    3f26:	ee 80       	ldd	r14, Y+6	; 0x06
    3f28:	fd 80       	ldd	r15, Y+5	; 0x05
    3f2a:	0c 81       	ldd	r16, Y+4	; 0x04
    3f2c:	1b 81       	ldd	r17, Y+3	; 0x03
    3f2e:	aa 81       	ldd	r26, Y+2	; 0x02
    3f30:	b9 81       	ldd	r27, Y+1	; 0x01
    3f32:	ce 0f       	add	r28, r30
    3f34:	d1 1d       	adc	r29, r1
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	ed 01       	movw	r28, r26
    3f42:	08 95       	ret

00003f44 <memset>:
    3f44:	dc 01       	movw	r26, r24
    3f46:	01 c0       	rjmp	.+2      	; 0x3f4a <memset+0x6>
    3f48:	6d 93       	st	X+, r22
    3f4a:	41 50       	subi	r20, 0x01	; 1
    3f4c:	50 40       	sbci	r21, 0x00	; 0
    3f4e:	e0 f7       	brcc	.-8      	; 0x3f48 <memset+0x4>
    3f50:	08 95       	ret

00003f52 <strcmp>:
    3f52:	fb 01       	movw	r30, r22
    3f54:	dc 01       	movw	r26, r24
    3f56:	8d 91       	ld	r24, X+
    3f58:	01 90       	ld	r0, Z+
    3f5a:	80 19       	sub	r24, r0
    3f5c:	01 10       	cpse	r0, r1
    3f5e:	d9 f3       	breq	.-10     	; 0x3f56 <strcmp+0x4>
    3f60:	99 0b       	sbc	r25, r25
    3f62:	08 95       	ret

00003f64 <_exit>:
    3f64:	f8 94       	cli

00003f66 <__stop_program>:
    3f66:	ff cf       	rjmp	.-2      	; 0x3f66 <__stop_program>
